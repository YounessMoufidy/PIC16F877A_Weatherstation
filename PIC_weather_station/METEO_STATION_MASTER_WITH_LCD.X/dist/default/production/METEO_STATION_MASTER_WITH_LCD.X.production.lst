

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun May 26 15:43:36 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Generated 22/03/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F877A Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0000                     	;# 
    70     0001                     	;# 
    71     0002                     	;# 
    72     0003                     	;# 
    73     0004                     	;# 
    74     0005                     	;# 
    75     0006                     	;# 
    76     0007                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     000C                     	;# 
    82     000D                     	;# 
    83     000E                     	;# 
    84     000E                     	;# 
    85     000F                     	;# 
    86     0010                     	;# 
    87     0011                     	;# 
    88     0012                     	;# 
    89     0013                     	;# 
    90     0014                     	;# 
    91     0015                     	;# 
    92     0015                     	;# 
    93     0016                     	;# 
    94     0017                     	;# 
    95     0018                     	;# 
    96     0019                     	;# 
    97     001A                     	;# 
    98     001B                     	;# 
    99     001B                     	;# 
   100     001C                     	;# 
   101     001D                     	;# 
   102     001E                     	;# 
   103     001F                     	;# 
   104     0081                     	;# 
   105     0085                     	;# 
   106     0086                     	;# 
   107     0087                     	;# 
   108     0088                     	;# 
   109     0089                     	;# 
   110     008C                     	;# 
   111     008D                     	;# 
   112     008E                     	;# 
   113     0091                     	;# 
   114     0092                     	;# 
   115     0093                     	;# 
   116     0094                     	;# 
   117     0098                     	;# 
   118     0099                     	;# 
   119     009C                     	;# 
   120     009D                     	;# 
   121     009E                     	;# 
   122     009F                     	;# 
   123     010C                     	;# 
   124     010D                     	;# 
   125     010E                     	;# 
   126     010F                     	;# 
   127     018C                     	;# 
   128     018D                     	;# 
   129     0000                     	;# 
   130     0001                     	;# 
   131     0002                     	;# 
   132     0003                     	;# 
   133     0004                     	;# 
   134     0005                     	;# 
   135     0006                     	;# 
   136     0007                     	;# 
   137     0008                     	;# 
   138     0009                     	;# 
   139     000A                     	;# 
   140     000B                     	;# 
   141     000C                     	;# 
   142     000D                     	;# 
   143     000E                     	;# 
   144     000E                     	;# 
   145     000F                     	;# 
   146     0010                     	;# 
   147     0011                     	;# 
   148     0012                     	;# 
   149     0013                     	;# 
   150     0014                     	;# 
   151     0015                     	;# 
   152     0015                     	;# 
   153     0016                     	;# 
   154     0017                     	;# 
   155     0018                     	;# 
   156     0019                     	;# 
   157     001A                     	;# 
   158     001B                     	;# 
   159     001B                     	;# 
   160     001C                     	;# 
   161     001D                     	;# 
   162     001E                     	;# 
   163     001F                     	;# 
   164     0081                     	;# 
   165     0085                     	;# 
   166     0086                     	;# 
   167     0087                     	;# 
   168     0088                     	;# 
   169     0089                     	;# 
   170     008C                     	;# 
   171     008D                     	;# 
   172     008E                     	;# 
   173     0091                     	;# 
   174     0092                     	;# 
   175     0093                     	;# 
   176     0094                     	;# 
   177     0098                     	;# 
   178     0099                     	;# 
   179     009C                     	;# 
   180     009D                     	;# 
   181     009E                     	;# 
   182     009F                     	;# 
   183     010C                     	;# 
   184     010D                     	;# 
   185     010E                     	;# 
   186     010F                     	;# 
   187     018C                     	;# 
   188     018D                     	;# 
   189                           
   190                           	psect	idataBANK0
   191     0441                     __pidataBANK0:
   192                           
   193                           ;initializer for _BackLight_State
   194     0441  3408               	retlw	8
   195                           
   196                           	psect	nvBANK0
   197     004A                     __pnvBANK0:
   198     004A                     _i2c_add:
   199     004A                     	ds	1
   200     0013                     _SSPBUF	set	19
   201     0014                     _SSPCON	set	20
   202     0008                     _PORTDbits	set	8
   203     0091                     _SSPCON2bits	set	145
   204     0093                     _SSPADD	set	147
   205     0094                     _SSPSTAT	set	148
   206     0091                     _SSPCON2	set	145
   207     0088                     _TRISD	set	136
   208     048E                     _ACKSTAT	set	1166
   209     048C                     _ACKEN	set	1164
   210     048D                     _ACKDT	set	1165
   211     0489                     _RSEN	set	1161
   212     048A                     _PEN	set	1162
   213     0488                     _SEN	set	1160
   214     043C                     _TRISC4	set	1084
   215     043B                     _TRISC3	set	1083
   216                           
   217                           	psect	strings
   218     0003                     __pstrings:
   219     0003                     stringtab:
   220     0003                     __stringtab:
   221                           
   222                           ;	String table - string pointers are 1 byte each
   223     0003  1BFF               	btfsc	btemp+1,7
   224     0004  280D               	ljmp	stringcode
   225     0005  1383               	bcf	3,7
   226     0006  187F               	btfsc	btemp+1,0
   227     0007  1783               	bsf	3,7
   228     0008  0800               	movf	0,w
   229     0009  0A84               	incf	4,f
   230     000A  1903               	skipnz
   231     000B  0AFF               	incf	btemp+1,f
   232     000C  0008               	return
   233     000D                     stringcode:
   234     000D                     stringdir:
   235     000D  3000               	movlw	high stringdir
   236     000E  008A               	movwf	10
   237     000F  0804               	movf	4,w
   238     0010  0A84               	incf	4,f
   239     0011  0782               	addwf	2,f
   240     0012                     __stringbase:
   241     0012  3400               	retlw	0
   242     0013                     __end_of__stringtab:
   243     0013                     STR_1:
   244     0013  3454               	retlw	84	;'T'
   245     0014  3465               	retlw	101	;'e'
   246     0015  346D               	retlw	109	;'m'
   247     0016  3470               	retlw	112	;'p'
   248     0017  3465               	retlw	101	;'e'
   249     0018  3472               	retlw	114	;'r'
   250     0019  3461               	retlw	97	;'a'
   251     001A  3474               	retlw	116	;'t'
   252     001B  3475               	retlw	117	;'u'
   253     001C  3472               	retlw	114	;'r'
   254     001D  3465               	retlw	101	;'e'
   255     001E  3400               	retlw	0
   256                           
   257                           	psect	cinit
   258     07F4                     start_initialization:	
   259                           ; #config settings
   260                           
   261     07F4                     __initialization:
   262                           
   263                           ; Initialize objects allocated to BANK0
   264     07F4  120A  118A  2441  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   265     07F9  00CC               	movwf	__pdataBANK0& (0+127)
   266                           
   267                           ; Clear objects allocated to BANK0
   268     07FA  01CB               	clrf	__pbssBANK0& (0+127)
   269                           
   270                           ; Clear objects allocated to COMMON
   271     07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   272     07FC                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275     07FC                     __end_of__initialization:
   276     07FC  0183               	clrf	3
   277     07FD  120A  118A  2EE5   	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	bssCOMMON
   280     007D                     __pbssCOMMON:
   281     007D                     _RS:
   282     007D                     	ds	1
   283                           
   284                           	psect	bssBANK0
   285     004B                     __pbssBANK0:
   286     004B                     _Temp_value:
   287     004B                     	ds	1
   288                           
   289                           	psect	dataBANK0
   290     004C                     __pdataBANK0:
   291     004C                     _BackLight_State:
   292     004C                     	ds	1
   293                           
   294                           	psect	cstackCOMMON
   295     0070                     __pcstackCOMMON:
   296     0070                     ?_I2C_Master_Init:
   297     0070                     ??_I2C_Master_Init:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?_LCD_Init:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ?_I2C_Start:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     ??_I2C_Start:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     ?_I2C_Write:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ??_I2C_Write:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ?_I2C_Read:	
   316                           ; 1 bytes @ 0x0
   317                           
   318     0070                     ??_I2C_Read:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0070                     ?_I2C_Stop:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ??_I2C_Stop:	
   325                           ; 1 bytes @ 0x0
   326                           
   327     0070                     ?_IO_Expander_Write:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0070                     ?_LCD_CMD:	
   331                           ; 1 bytes @ 0x0
   332                           
   333     0070                     ?_main:	
   334                           ; 1 bytes @ 0x0
   335                           
   336     0070                     ?_I2C_Wait:	
   337                           ; 1 bytes @ 0x0
   338                           
   339     0070                     ??_I2C_Wait:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_I2C_NACK:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ??_I2C_NACK:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ?_LCD_Write_4Bit:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ?_LCD_Write_Char:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ?___awdiv:	
   355                           ; 1 bytes @ 0x0
   356                           
   357     0070                     ?___awmod:	
   358                           ; 2 bytes @ 0x0
   359                           
   360     0070                     I2C_Write@Data:	
   361                           ; 2 bytes @ 0x0
   362                           
   363     0070                     I2C_Read@Data:	
   364                           ; 1 bytes @ 0x0
   365                           
   366     0070                     ___awdiv@divisor:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ___awmod@divisor:	
   370                           ; 2 bytes @ 0x0
   371                           
   372                           
   373                           ; 2 bytes @ 0x0
   374     0070                     	ds	1
   375     0071                     ?_EEPROM_write:
   376     0071                     ??_IO_Expander_Write:	
   377                           ; 1 bytes @ 0x1
   378                           
   379     0071                     IO_Expander_Write@Data:	
   380                           ; 1 bytes @ 0x1
   381                           
   382     0071                     EEPROM_write@Address_LOW:	
   383                           ; 1 bytes @ 0x1
   384                           
   385                           
   386                           ; 1 bytes @ 0x1
   387     0071                     	ds	1
   388     0072                     ??_LCD_Write_4Bit:
   389     0072                     EEPROM_write@data:	
   390                           ; 1 bytes @ 0x2
   391                           
   392     0072                     ___awdiv@dividend:	
   393                           ; 1 bytes @ 0x2
   394                           
   395     0072                     ___awmod@dividend:	
   396                           ; 2 bytes @ 0x2
   397                           
   398                           
   399                           ; 2 bytes @ 0x2
   400     0072                     	ds	1
   401     0073                     ??_EEPROM_write:
   402     0073                     LCD_Write_4Bit@Nibble:	
   403                           ; 1 bytes @ 0x3
   404                           
   405     0073                     EEPROM_write@Address_High:	
   406                           ; 1 bytes @ 0x3
   407                           
   408                           
   409                           ; 1 bytes @ 0x3
   410     0073                     	ds	1
   411     0074                     ??_LCD_CMD:
   412     0074                     ??_LCD_Write_Char:	
   413                           ; 1 bytes @ 0x4
   414                           
   415     0074                     ??___awdiv:	
   416                           ; 1 bytes @ 0x4
   417                           
   418     0074                     ??___awmod:	
   419                           ; 1 bytes @ 0x4
   420                           
   421     0074                     ___awdiv@counter:	
   422                           ; 1 bytes @ 0x4
   423                           
   424     0074                     ___awmod@counter:	
   425                           ; 1 bytes @ 0x4
   426                           
   427                           
   428                           ; 1 bytes @ 0x4
   429     0074                     	ds	1
   430     0075                     LCD_CMD@CMD:
   431     0075                     LCD_Write_Char@Data:	
   432                           ; 1 bytes @ 0x5
   433                           
   434     0075                     ___awdiv@sign:	
   435                           ; 1 bytes @ 0x5
   436                           
   437     0075                     ___awmod@sign:	
   438                           ; 1 bytes @ 0x5
   439                           
   440                           
   441                           ; 1 bytes @ 0x5
   442     0075                     	ds	1
   443     0076                     ??_LCD_Init:
   444     0076                     ?_LCD_Set_Cursor:	
   445                           ; 1 bytes @ 0x6
   446                           
   447     0076                     ?_LCD_Write_String:	
   448                           ; 1 bytes @ 0x6
   449                           
   450     0076                     LCD_Set_Cursor@COL:	
   451                           ; 1 bytes @ 0x6
   452                           
   453     0076                     LCD_Write_String@Str:	
   454                           ; 1 bytes @ 0x6
   455                           
   456     0076                     ___awdiv@quotient:	
   457                           ; 2 bytes @ 0x6
   458                           
   459                           
   460                           ; 2 bytes @ 0x6
   461     0076                     	ds	1
   462     0077                     ??_LCD_Set_Cursor:
   463                           
   464                           ; 1 bytes @ 0x7
   465     0077                     	ds	1
   466     0078                     ??_LCD_Write_String:
   467     0078                     ?_tostring:	
   468                           ; 1 bytes @ 0x8
   469                           
   470     0078                     LCD_Init@I2C_Add:	
   471                           ; 1 bytes @ 0x8
   472                           
   473     0078                     tostring@num:	
   474                           ; 1 bytes @ 0x8
   475                           
   476                           
   477                           ; 2 bytes @ 0x8
   478     0078                     	ds	1
   479     0079                     LCD_Set_Cursor@ROW:
   480                           
   481                           ; 1 bytes @ 0x9
   482     0079                     	ds	1
   483     007A                     ??_tostring:
   484                           
   485                           ; 1 bytes @ 0xA
   486     007A                     	ds	1
   487     007B                     LCD_Write_String@i:
   488                           
   489                           ; 2 bytes @ 0xB
   490     007B                     	ds	2
   491                           
   492                           	psect	cstackBANK0
   493     0020                     __pcstackBANK0:
   494     0020                     tostring@rem:
   495                           
   496                           ; 2 bytes @ 0x0
   497     0020                     	ds	2
   498     0022                     tostring@i:
   499                           
   500                           ; 2 bytes @ 0x2
   501     0022                     	ds	2
   502     0024                     tostring@n:
   503                           
   504                           ; 2 bytes @ 0x4
   505     0024                     	ds	2
   506     0026                     tostring@str:
   507                           
   508                           ; 1 bytes @ 0x6
   509     0026                     	ds	1
   510     0027                     tostring@len:
   511                           
   512                           ; 2 bytes @ 0x7
   513     0027                     	ds	2
   514     0029                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x9
   517     0029                     	ds	3
   518     002C                     main@str:
   519                           
   520                           ; 30 bytes @ 0xC
   521     002C                     	ds	30
   522                           
   523                           	psect	maintext
   524     06E5                     __pmaintext:	
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 86 in file "main.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;  str            30   12[BANK0 ] unsigned char [30]
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : B00/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       0       0       0       0
   545 ;;      Locals:         0      30       0       0       0
   546 ;;      Temps:          0       3       0       0       0
   547 ;;      Totals:         0      33       0       0       0
   548 ;;Total ram usage:       33 bytes
   549 ;; Hardware stack levels required when called: 6
   550 ;; This function calls:
   551 ;;		_EEPROM_write
   552 ;;		_I2C_Master_Init
   553 ;;		_I2C_Read
   554 ;;		_I2C_Start
   555 ;;		_I2C_Stop
   556 ;;		_I2C_Write
   557 ;;		_LCD_Init
   558 ;;		_LCD_Set_Cursor
   559 ;;		_LCD_Write_String
   560 ;;		_tostring
   561 ;; This function is called by:
   562 ;;		Startup code after reset
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566     06E5                     _main:	
   567                           ;psect for function _main
   568                           
   569     06E5                     l1282:	
   570                           ;incstack = 0
   571                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   572                           
   573                           
   574                           ;main.c: 88:   TRISD=0;
   575     06E5  1683               	bsf	3,5	;RP0=1, select bank1
   576     06E6  1303               	bcf	3,6	;RP1=0, select bank1
   577     06E7  0188               	clrf	8	;volatile
   578     06E8                     l1284:
   579                           
   580                           ;main.c: 89:   I2C_Master_Init();
   581     06E8  120A  118A  246B  120A  118A  	fcall	_I2C_Master_Init
   582     06ED                     l1286:
   583                           
   584                           ;main.c: 90:   LCD_Init(0x4E);
   585     06ED  304E               	movlw	78
   586     06EE  120A  118A  276C  120A  118A  	fcall	_LCD_Init
   587     06F3                     l1288:
   588                           
   589                           ;main.c: 91:   LCD_Set_Cursor(1, 1);
   590     06F3  01F6               	clrf	LCD_Set_Cursor@COL
   591     06F4  0AF6               	incf	LCD_Set_Cursor@COL,f
   592     06F5  3001               	movlw	1
   593     06F6  120A  118A  252F  120A  118A  	fcall	_LCD_Set_Cursor
   594     06FB                     l1290:
   595                           
   596                           ;main.c: 92:   LCD_Write_String("Temperature");
   597     06FB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   598     06FC  00F6               	movwf	LCD_Write_String@Str
   599     06FD  3080               	movlw	128
   600     06FE  00F7               	movwf	LCD_Write_String@Str+1
   601     06FF  120A  118A  2565  120A  118A  	fcall	_LCD_Write_String
   602     0704                     l1292:
   603                           
   604                           ;main.c: 95:   {;main.c: 96:     I2C_Start();
   605     0704  120A  118A  2442  120A  118A  	fcall	_I2C_Start
   606     0709                     l1294:
   607                           
   608                           ;main.c: 97:     I2C_Write(0x41);
   609     0709  3041               	movlw	65
   610     070A  120A  118A  2478  120A  118A  	fcall	_I2C_Write
   611     070F                     l1296:
   612                           
   613                           ;main.c: 98:     Temp_value=I2C_Read();
   614     070F  120A  118A  2488  120A  118A  	fcall	_I2C_Read
   615     0714  1283               	bcf	3,5	;RP0=0, select bank0
   616     0715  1303               	bcf	3,6	;RP1=0, select bank0
   617     0716  00CB               	movwf	_Temp_value
   618     0717                     l1298:
   619                           
   620                           ;main.c: 99:     I2C_Stop();
   621     0717  120A  118A  244B  120A  118A  	fcall	_I2C_Stop
   622     071C                     l1300:
   623                           
   624                           ;main.c: 100:     PORTDbits.RD0=1;
   625     071C  1283               	bcf	3,5	;RP0=0, select bank0
   626     071D  1303               	bcf	3,6	;RP1=0, select bank0
   627     071E  1408               	bsf	8,0	;volatile
   628     071F                     l1302:
   629                           
   630                           ;main.c: 101:     _delay((unsigned long)((500)*(4000000/4000.0)));
   631     071F  3003               	movlw	3
   632     0720  1283               	bcf	3,5	;RP0=0, select bank0
   633     0721  1303               	bcf	3,6	;RP1=0, select bank0
   634     0722  00AB               	movwf	??_main+2
   635     0723  308A               	movlw	138
   636     0724  00AA               	movwf	??_main+1
   637     0725  3055               	movlw	85
   638     0726  00A9               	movwf	??_main
   639     0727                     u577:
   640     0727  0BA9               	decfsz	??_main,f
   641     0728  2F27               	goto	u577
   642     0729  0BAA               	decfsz	??_main+1,f
   643     072A  2F27               	goto	u577
   644     072B  0BAB               	decfsz	??_main+2,f
   645     072C  2F27               	goto	u577
   646     072D                     l1304:
   647                           
   648                           ;main.c: 103:     tostring(str,Temp_value);
   649     072D  1283               	bcf	3,5	;RP0=0, select bank0
   650     072E  1303               	bcf	3,6	;RP1=0, select bank0
   651     072F  084B               	movf	_Temp_value,w
   652     0730  00A9               	movwf	??_main
   653     0731  01AA               	clrf	??_main+1
   654     0732  0829               	movf	??_main,w
   655     0733  00F8               	movwf	tostring@num
   656     0734  082A               	movf	??_main+1,w
   657     0735  00F9               	movwf	tostring@num+1
   658     0736  302C               	movlw	(low (main@str| 0))& (0+255)
   659     0737  120A  118A  2667  120A  118A  	fcall	_tostring
   660     073C                     l1306:
   661                           
   662                           ;main.c: 104:     EEPROM_write(0x31,0x38,Temp_value);
   663     073C  3038               	movlw	56
   664     073D  00F1               	movwf	EEPROM_write@Address_LOW
   665     073E  1283               	bcf	3,5	;RP0=0, select bank0
   666     073F  1303               	bcf	3,6	;RP1=0, select bank0
   667     0740  084B               	movf	_Temp_value,w
   668     0741  00F2               	movwf	EEPROM_write@data
   669     0742  3031               	movlw	49
   670     0743  120A  118A  250B  120A  118A  	fcall	_EEPROM_write
   671     0748                     l1308:
   672                           
   673                           ;main.c: 105:     LCD_Set_Cursor(2, 1);
   674     0748  01F6               	clrf	LCD_Set_Cursor@COL
   675     0749  0AF6               	incf	LCD_Set_Cursor@COL,f
   676     074A  3002               	movlw	2
   677     074B  120A  118A  252F  120A  118A  	fcall	_LCD_Set_Cursor
   678     0750                     l1310:
   679                           
   680                           ;main.c: 106:     LCD_Write_String(str);
   681     0750  302C               	movlw	(low (main@str| 0))& (0+255)
   682     0751  00F6               	movwf	LCD_Write_String@Str
   683     0752  3000               	movlw	0
   684     0753  00F7               	movwf	LCD_Write_String@Str+1
   685     0754  120A  118A  2565  120A  118A  	fcall	_LCD_Write_String
   686     0759                     l1312:
   687                           
   688                           ;main.c: 107:     _delay((unsigned long)((2500)*(4000000/4000.0)));
   689     0759  300D               	movlw	13
   690     075A  1283               	bcf	3,5	;RP0=0, select bank0
   691     075B  1303               	bcf	3,6	;RP1=0, select bank0
   692     075C  00AB               	movwf	??_main+2
   693     075D  30AF               	movlw	175
   694     075E  00AA               	movwf	??_main+1
   695     075F  30B5               	movlw	181
   696     0760  00A9               	movwf	??_main
   697     0761                     u587:
   698     0761  0BA9               	decfsz	??_main,f
   699     0762  2F61               	goto	u587
   700     0763  0BAA               	decfsz	??_main+1,f
   701     0764  2F61               	goto	u587
   702     0765  0BAB               	decfsz	??_main+2,f
   703     0766  2F61               	goto	u587
   704     0767  2F68               	nop2
   705     0768  2F04               	goto	l1292
   706     0769  120A  118A  2800   	ljmp	start
   707     076C                     __end_of_main:
   708                           
   709                           	psect	text1
   710     0667                     __ptext1:	
   711 ;; *************** function _tostring *****************
   712 ;; Defined at:
   713 ;;		line 67 in file "main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;  str             1    wreg     PTR unsigned char 
   716 ;;		 -> main@str(30), 
   717 ;;  num             2    8[COMMON] int 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  str             1    6[BANK0 ] PTR unsigned char 
   720 ;;		 -> main@str(30), 
   721 ;;  len             2    7[BANK0 ] int 
   722 ;;  n               2    4[BANK0 ] int 
   723 ;;  i               2    2[BANK0 ] int 
   724 ;;  rem             2    0[BANK0 ] int 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         2       0       0       0       0
   735 ;;      Locals:         0       9       0       0       0
   736 ;;      Temps:          2       0       0       0       0
   737 ;;      Totals:         4       9       0       0       0
   738 ;;Total ram usage:       13 bytes
   739 ;; Hardware stack levels used: 1
   740 ;; Hardware stack levels required when called: 1
   741 ;; This function calls:
   742 ;;		___awdiv
   743 ;;		___awmod
   744 ;; This function is called by:
   745 ;;		_main
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749     0667                     _tostring:	
   750                           ;psect for function _tostring
   751                           
   752                           
   753                           ;incstack = 0
   754                           ; Regs used in _tostring: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   755                           ;tostring@str stored from wreg
   756     0667  1283               	bcf	3,5	;RP0=0, select bank0
   757     0668  1303               	bcf	3,6	;RP1=0, select bank0
   758     0669  00A6               	movwf	tostring@str
   759     066A                     l1172:
   760                           
   761                           ;main.c: 67: void tostring(char str[], int num);main.c: 68: {;main.c: 69:     int i, rem
      +                          , len = 0, n;
   762     066A  01A7               	clrf	tostring@len
   763     066B  01A8               	clrf	tostring@len+1
   764     066C                     l1174:
   765                           
   766                           ;main.c: 71:     n = num;
   767     066C  0879               	movf	tostring@num+1,w
   768     066D  00A5               	movwf	tostring@n+1
   769     066E  0878               	movf	tostring@num,w
   770     066F  00A4               	movwf	tostring@n
   771                           
   772                           ;main.c: 72:     while (n != 0)
   773     0670  2E8A               	goto	l1180
   774     0671                     l1176:
   775                           
   776                           ;main.c: 73:     {;main.c: 74:         len++;
   777     0671  3001               	movlw	1
   778     0672  07A7               	addwf	tostring@len,f
   779     0673  1803               	skipnc
   780     0674  0AA8               	incf	tostring@len+1,f
   781     0675  3000               	movlw	0
   782     0676  07A8               	addwf	tostring@len+1,f
   783     0677                     l1178:
   784                           
   785                           ;main.c: 75:         n /= 10;
   786     0677  300A               	movlw	10
   787     0678  00F0               	movwf	___awdiv@divisor
   788     0679  3000               	movlw	0
   789     067A  00F1               	movwf	___awdiv@divisor+1
   790     067B  0825               	movf	tostring@n+1,w
   791     067C  00F3               	movwf	___awdiv@dividend+1
   792     067D  0824               	movf	tostring@n,w
   793     067E  00F2               	movwf	___awdiv@dividend
   794     067F  120A  118A  2600  120A  118A  	fcall	___awdiv
   795     0684  0871               	movf	?___awdiv+1,w
   796     0685  1283               	bcf	3,5	;RP0=0, select bank0
   797     0686  1303               	bcf	3,6	;RP1=0, select bank0
   798     0687  00A5               	movwf	tostring@n+1
   799     0688  0870               	movf	?___awdiv,w
   800     0689  00A4               	movwf	tostring@n
   801     068A                     l1180:
   802                           
   803                           ;main.c: 72:     while (n != 0)
   804     068A  0824               	movf	tostring@n,w
   805     068B  0425               	iorwf	tostring@n+1,w
   806     068C  1D03               	btfss	3,2
   807     068D  2E8F               	goto	u521
   808     068E  2E90               	goto	u520
   809     068F                     u521:
   810     068F  2E71               	goto	l1176
   811     0690                     u520:
   812     0690                     l1182:
   813                           
   814                           ;main.c: 77:     for (i = 0; i < len; i++)
   815     0690  01A2               	clrf	tostring@i
   816     0691  01A3               	clrf	tostring@i+1
   817     0692  2ECD               	goto	l1190
   818     0693                     l1184:
   819                           
   820                           ;main.c: 78:     {;main.c: 79:         rem = num % 10;
   821     0693  300A               	movlw	10
   822     0694  00F0               	movwf	___awmod@divisor
   823     0695  3000               	movlw	0
   824     0696  00F1               	movwf	___awmod@divisor+1
   825     0697  0879               	movf	tostring@num+1,w
   826     0698  00F3               	movwf	___awmod@dividend+1
   827     0699  0878               	movf	tostring@num,w
   828     069A  00F2               	movwf	___awmod@dividend
   829     069B  120A  118A  25A7  120A  118A  	fcall	___awmod
   830     06A0  0871               	movf	?___awmod+1,w
   831     06A1  1283               	bcf	3,5	;RP0=0, select bank0
   832     06A2  1303               	bcf	3,6	;RP1=0, select bank0
   833     06A3  00A1               	movwf	tostring@rem+1
   834     06A4  0870               	movf	?___awmod,w
   835     06A5  00A0               	movwf	tostring@rem
   836                           
   837                           ;main.c: 80:         num = num / 10;
   838     06A6  300A               	movlw	10
   839     06A7  00F0               	movwf	___awdiv@divisor
   840     06A8  3000               	movlw	0
   841     06A9  00F1               	movwf	___awdiv@divisor+1
   842     06AA  0879               	movf	tostring@num+1,w
   843     06AB  00F3               	movwf	___awdiv@dividend+1
   844     06AC  0878               	movf	tostring@num,w
   845     06AD  00F2               	movwf	___awdiv@dividend
   846     06AE  120A  118A  2600  120A  118A  	fcall	___awdiv
   847     06B3  0871               	movf	?___awdiv+1,w
   848     06B4  00F9               	movwf	tostring@num+1
   849     06B5  0870               	movf	?___awdiv,w
   850     06B6  00F8               	movwf	tostring@num
   851     06B7                     l1186:
   852                           
   853                           ;main.c: 81:         str[len - (i + 1)] = rem + '0';
   854     06B7  1283               	bcf	3,5	;RP0=0, select bank0
   855     06B8  1303               	bcf	3,6	;RP1=0, select bank0
   856     06B9  0826               	movf	tostring@str,w
   857     06BA  00FA               	movwf	??_tostring
   858     06BB  0822               	movf	tostring@i,w
   859     06BC  02FA               	subwf	??_tostring,f
   860     06BD  0827               	movf	tostring@len,w
   861     06BE  077A               	addwf	??_tostring,w
   862     06BF  00FB               	movwf	??_tostring+1
   863     06C0  087B               	movf	??_tostring+1,w
   864     06C1  3EFF               	addlw	-1
   865     06C2  0084               	movwf	4
   866     06C3  0820               	movf	tostring@rem,w
   867     06C4  3E30               	addlw	48
   868     06C5  1383               	bcf	3,7	;select IRP bank0
   869     06C6  0080               	movwf	0
   870     06C7                     l1188:
   871                           
   872                           ;main.c: 82:     }
   873     06C7  3001               	movlw	1
   874     06C8  07A2               	addwf	tostring@i,f
   875     06C9  1803               	skipnc
   876     06CA  0AA3               	incf	tostring@i+1,f
   877     06CB  3000               	movlw	0
   878     06CC  07A3               	addwf	tostring@i+1,f
   879     06CD                     l1190:
   880     06CD  0823               	movf	tostring@i+1,w
   881     06CE  3A80               	xorlw	128
   882     06CF  00FA               	movwf	??_tostring
   883     06D0  0828               	movf	tostring@len+1,w
   884     06D1  3A80               	xorlw	128
   885     06D2  027A               	subwf	??_tostring,w
   886     06D3  1D03               	skipz
   887     06D4  2ED7               	goto	u535
   888     06D5  0827               	movf	tostring@len,w
   889     06D6  0222               	subwf	tostring@i,w
   890     06D7                     u535:
   891     06D7  1C03               	skipc
   892     06D8  2EDA               	goto	u531
   893     06D9  2EDB               	goto	u530
   894     06DA                     u531:
   895     06DA  2E93               	goto	l1184
   896     06DB                     u530:
   897     06DB                     l1192:
   898                           
   899                           ;main.c: 83:     str[len] = '\0';
   900     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   901     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   902     06DD  0827               	movf	tostring@len,w
   903     06DE  0726               	addwf	tostring@str,w
   904     06DF  00FA               	movwf	??_tostring
   905     06E0  087A               	movf	??_tostring,w
   906     06E1  0084               	movwf	4
   907     06E2  1383               	bcf	3,7	;select IRP bank0
   908     06E3  0180               	clrf	0
   909     06E4                     l73:
   910     06E4  0008               	return
   911     06E5                     __end_of_tostring:
   912                           
   913                           	psect	text2
   914     05A7                     __ptext2:	
   915 ;; *************** function ___awmod *****************
   916 ;; Defined at:
   917 ;;		line 5 in file "E:\xc8 compiler\pic\sources\c99\common\awmod.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  divisor         2    0[COMMON] int 
   920 ;;  dividend        2    2[COMMON] int 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  sign            1    5[COMMON] unsigned char 
   923 ;;  counter         1    4[COMMON] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  2    0[COMMON] int 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0, btemp+1
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   933 ;;      Params:         4       0       0       0       0
   934 ;;      Locals:         2       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0
   936 ;;      Totals:         6       0       0       0       0
   937 ;;Total ram usage:        6 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_tostring
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946     05A7                     ___awmod:	
   947                           ;psect for function ___awmod
   948                           
   949     05A7                     l1134:	
   950                           ;incstack = 0
   951                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
   952                           
   953     05A7  01F5               	clrf	___awmod@sign
   954     05A8                     l1136:
   955     05A8  1FF3               	btfss	___awmod@dividend+1,7
   956     05A9  2DAB               	goto	u431
   957     05AA  2DAC               	goto	u430
   958     05AB                     u431:
   959     05AB  2DB3               	goto	l1142
   960     05AC                     u430:
   961     05AC                     l1138:
   962     05AC  09F2               	comf	___awmod@dividend,f
   963     05AD  09F3               	comf	___awmod@dividend+1,f
   964     05AE  0AF2               	incf	___awmod@dividend,f
   965     05AF  1903               	skipnz
   966     05B0  0AF3               	incf	___awmod@dividend+1,f
   967     05B1                     l1140:
   968     05B1  01F5               	clrf	___awmod@sign
   969     05B2  0AF5               	incf	___awmod@sign,f
   970     05B3                     l1142:
   971     05B3  1FF1               	btfss	___awmod@divisor+1,7
   972     05B4  2DB6               	goto	u441
   973     05B5  2DB7               	goto	u440
   974     05B6                     u441:
   975     05B6  2DBC               	goto	l1146
   976     05B7                     u440:
   977     05B7                     l1144:
   978     05B7  09F0               	comf	___awmod@divisor,f
   979     05B8  09F1               	comf	___awmod@divisor+1,f
   980     05B9  0AF0               	incf	___awmod@divisor,f
   981     05BA  1903               	skipnz
   982     05BB  0AF1               	incf	___awmod@divisor+1,f
   983     05BC                     l1146:
   984     05BC  0870               	movf	___awmod@divisor,w
   985     05BD  0471               	iorwf	___awmod@divisor+1,w
   986     05BE  1903               	btfsc	3,2
   987     05BF  2DC1               	goto	u451
   988     05C0  2DC2               	goto	u450
   989     05C1                     u451:
   990     05C1  2DF1               	goto	l1164
   991     05C2                     u450:
   992     05C2                     l1148:
   993     05C2  01F4               	clrf	___awmod@counter
   994     05C3  0AF4               	incf	___awmod@counter,f
   995     05C4  2DD0               	goto	l1154
   996     05C5                     l1150:
   997     05C5  3001               	movlw	1
   998     05C6                     u465:
   999     05C6  1003               	clrc
  1000     05C7  0DF0               	rlf	___awmod@divisor,f
  1001     05C8  0DF1               	rlf	___awmod@divisor+1,f
  1002     05C9  3EFF               	addlw	-1
  1003     05CA  1D03               	skipz
  1004     05CB  2DC6               	goto	u465
  1005     05CC                     l1152:
  1006     05CC  3001               	movlw	1
  1007     05CD  00FF               	movwf	btemp+1
  1008     05CE  087F               	movf	btemp+1,w
  1009     05CF  07F4               	addwf	___awmod@counter,f
  1010     05D0                     l1154:
  1011     05D0  1FF1               	btfss	___awmod@divisor+1,7
  1012     05D1  2DD3               	goto	u471
  1013     05D2  2DD4               	goto	u470
  1014     05D3                     u471:
  1015     05D3  2DC5               	goto	l1150
  1016     05D4                     u470:
  1017     05D4                     l1156:
  1018     05D4  0871               	movf	___awmod@divisor+1,w
  1019     05D5  0273               	subwf	___awmod@dividend+1,w
  1020     05D6  1D03               	skipz
  1021     05D7  2DDA               	goto	u485
  1022     05D8  0870               	movf	___awmod@divisor,w
  1023     05D9  0272               	subwf	___awmod@dividend,w
  1024     05DA                     u485:
  1025     05DA  1C03               	skipc
  1026     05DB  2DDD               	goto	u481
  1027     05DC  2DDE               	goto	u480
  1028     05DD                     u481:
  1029     05DD  2DE4               	goto	l1160
  1030     05DE                     u480:
  1031     05DE                     l1158:
  1032     05DE  0870               	movf	___awmod@divisor,w
  1033     05DF  02F2               	subwf	___awmod@dividend,f
  1034     05E0  0871               	movf	___awmod@divisor+1,w
  1035     05E1  1C03               	skipc
  1036     05E2  03F3               	decf	___awmod@dividend+1,f
  1037     05E3  02F3               	subwf	___awmod@dividend+1,f
  1038     05E4                     l1160:
  1039     05E4  3001               	movlw	1
  1040     05E5                     u495:
  1041     05E5  1003               	clrc
  1042     05E6  0CF1               	rrf	___awmod@divisor+1,f
  1043     05E7  0CF0               	rrf	___awmod@divisor,f
  1044     05E8  3EFF               	addlw	-1
  1045     05E9  1D03               	skipz
  1046     05EA  2DE5               	goto	u495
  1047     05EB                     l1162:
  1048     05EB  3001               	movlw	1
  1049     05EC  02F4               	subwf	___awmod@counter,f
  1050     05ED  1D03               	btfss	3,2
  1051     05EE  2DF0               	goto	u501
  1052     05EF  2DF1               	goto	u500
  1053     05F0                     u501:
  1054     05F0  2DD4               	goto	l1156
  1055     05F1                     u500:
  1056     05F1                     l1164:
  1057     05F1  0875               	movf	___awmod@sign,w
  1058     05F2  1903               	btfsc	3,2
  1059     05F3  2DF5               	goto	u511
  1060     05F4  2DF6               	goto	u510
  1061     05F5                     u511:
  1062     05F5  2DFB               	goto	l1168
  1063     05F6                     u510:
  1064     05F6                     l1166:
  1065     05F6  09F2               	comf	___awmod@dividend,f
  1066     05F7  09F3               	comf	___awmod@dividend+1,f
  1067     05F8  0AF2               	incf	___awmod@dividend,f
  1068     05F9  1903               	skipnz
  1069     05FA  0AF3               	incf	___awmod@dividend+1,f
  1070     05FB                     l1168:
  1071     05FB  0873               	movf	___awmod@dividend+1,w
  1072     05FC  00F1               	movwf	?___awmod+1
  1073     05FD  0872               	movf	___awmod@dividend,w
  1074     05FE  00F0               	movwf	?___awmod
  1075     05FF                     l414:
  1076     05FF  0008               	return
  1077     0600                     __end_of___awmod:
  1078                           
  1079                           	psect	text3
  1080     0600                     __ptext3:	
  1081 ;; *************** function ___awdiv *****************
  1082 ;; Defined at:
  1083 ;;		line 5 in file "E:\xc8 compiler\pic\sources\c99\common\awdiv.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  divisor         2    0[COMMON] int 
  1086 ;;  dividend        2    2[COMMON] int 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  quotient        2    6[COMMON] int 
  1089 ;;  sign            1    5[COMMON] unsigned char 
  1090 ;;  counter         1    4[COMMON] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  2    0[COMMON] int 
  1093 ;; Registers used:
  1094 ;;		wreg, status,2, status,0, btemp+1
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1100 ;;      Params:         4       0       0       0       0
  1101 ;;      Locals:         4       0       0       0       0
  1102 ;;      Temps:          0       0       0       0       0
  1103 ;;      Totals:         8       0       0       0       0
  1104 ;;Total ram usage:        8 bytes
  1105 ;; Hardware stack levels used: 1
  1106 ;; This function calls:
  1107 ;;		Nothing
  1108 ;; This function is called by:
  1109 ;;		_tostring
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113     0600                     ___awdiv:	
  1114                           ;psect for function ___awdiv
  1115                           
  1116     0600                     l1090:	
  1117                           ;incstack = 0
  1118                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1119                           
  1120     0600  01F5               	clrf	___awdiv@sign
  1121     0601                     l1092:
  1122     0601  1FF1               	btfss	___awdiv@divisor+1,7
  1123     0602  2E04               	goto	u331
  1124     0603  2E05               	goto	u330
  1125     0604                     u331:
  1126     0604  2E0C               	goto	l1098
  1127     0605                     u330:
  1128     0605                     l1094:
  1129     0605  09F0               	comf	___awdiv@divisor,f
  1130     0606  09F1               	comf	___awdiv@divisor+1,f
  1131     0607  0AF0               	incf	___awdiv@divisor,f
  1132     0608  1903               	skipnz
  1133     0609  0AF1               	incf	___awdiv@divisor+1,f
  1134     060A                     l1096:
  1135     060A  01F5               	clrf	___awdiv@sign
  1136     060B  0AF5               	incf	___awdiv@sign,f
  1137     060C                     l1098:
  1138     060C  1FF3               	btfss	___awdiv@dividend+1,7
  1139     060D  2E0F               	goto	u341
  1140     060E  2E10               	goto	u340
  1141     060F                     u341:
  1142     060F  2E19               	goto	l1104
  1143     0610                     u340:
  1144     0610                     l1100:
  1145     0610  09F2               	comf	___awdiv@dividend,f
  1146     0611  09F3               	comf	___awdiv@dividend+1,f
  1147     0612  0AF2               	incf	___awdiv@dividend,f
  1148     0613  1903               	skipnz
  1149     0614  0AF3               	incf	___awdiv@dividend+1,f
  1150     0615                     l1102:
  1151     0615  3001               	movlw	1
  1152     0616  00FF               	movwf	btemp+1
  1153     0617  087F               	movf	btemp+1,w
  1154     0618  06F5               	xorwf	___awdiv@sign,f
  1155     0619                     l1104:
  1156     0619  01F6               	clrf	___awdiv@quotient
  1157     061A  01F7               	clrf	___awdiv@quotient+1
  1158     061B                     l1106:
  1159     061B  0870               	movf	___awdiv@divisor,w
  1160     061C  0471               	iorwf	___awdiv@divisor+1,w
  1161     061D  1903               	btfsc	3,2
  1162     061E  2E20               	goto	u351
  1163     061F  2E21               	goto	u350
  1164     0620                     u351:
  1165     0620  2E58               	goto	l1126
  1166     0621                     u350:
  1167     0621                     l1108:
  1168     0621  01F4               	clrf	___awdiv@counter
  1169     0622  0AF4               	incf	___awdiv@counter,f
  1170     0623  2E2F               	goto	l1114
  1171     0624                     l1110:
  1172     0624  3001               	movlw	1
  1173     0625                     u365:
  1174     0625  1003               	clrc
  1175     0626  0DF0               	rlf	___awdiv@divisor,f
  1176     0627  0DF1               	rlf	___awdiv@divisor+1,f
  1177     0628  3EFF               	addlw	-1
  1178     0629  1D03               	skipz
  1179     062A  2E25               	goto	u365
  1180     062B                     l1112:
  1181     062B  3001               	movlw	1
  1182     062C  00FF               	movwf	btemp+1
  1183     062D  087F               	movf	btemp+1,w
  1184     062E  07F4               	addwf	___awdiv@counter,f
  1185     062F                     l1114:
  1186     062F  1FF1               	btfss	___awdiv@divisor+1,7
  1187     0630  2E32               	goto	u371
  1188     0631  2E33               	goto	u370
  1189     0632                     u371:
  1190     0632  2E24               	goto	l1110
  1191     0633                     u370:
  1192     0633                     l1116:
  1193     0633  3001               	movlw	1
  1194     0634                     u385:
  1195     0634  1003               	clrc
  1196     0635  0DF6               	rlf	___awdiv@quotient,f
  1197     0636  0DF7               	rlf	___awdiv@quotient+1,f
  1198     0637  3EFF               	addlw	-1
  1199     0638  1D03               	skipz
  1200     0639  2E34               	goto	u385
  1201     063A  0871               	movf	___awdiv@divisor+1,w
  1202     063B  0273               	subwf	___awdiv@dividend+1,w
  1203     063C  1D03               	skipz
  1204     063D  2E40               	goto	u395
  1205     063E  0870               	movf	___awdiv@divisor,w
  1206     063F  0272               	subwf	___awdiv@dividend,w
  1207     0640                     u395:
  1208     0640  1C03               	skipc
  1209     0641  2E43               	goto	u391
  1210     0642  2E44               	goto	u390
  1211     0643                     u391:
  1212     0643  2E4B               	goto	l1122
  1213     0644                     u390:
  1214     0644                     l1118:
  1215     0644  0870               	movf	___awdiv@divisor,w
  1216     0645  02F2               	subwf	___awdiv@dividend,f
  1217     0646  0871               	movf	___awdiv@divisor+1,w
  1218     0647  1C03               	skipc
  1219     0648  03F3               	decf	___awdiv@dividend+1,f
  1220     0649  02F3               	subwf	___awdiv@dividend+1,f
  1221     064A                     l1120:
  1222     064A  1476               	bsf	___awdiv@quotient,0
  1223     064B                     l1122:
  1224     064B  3001               	movlw	1
  1225     064C                     u405:
  1226     064C  1003               	clrc
  1227     064D  0CF1               	rrf	___awdiv@divisor+1,f
  1228     064E  0CF0               	rrf	___awdiv@divisor,f
  1229     064F  3EFF               	addlw	-1
  1230     0650  1D03               	skipz
  1231     0651  2E4C               	goto	u405
  1232     0652                     l1124:
  1233     0652  3001               	movlw	1
  1234     0653  02F4               	subwf	___awdiv@counter,f
  1235     0654  1D03               	btfss	3,2
  1236     0655  2E57               	goto	u411
  1237     0656  2E58               	goto	u410
  1238     0657                     u411:
  1239     0657  2E33               	goto	l1116
  1240     0658                     u410:
  1241     0658                     l1126:
  1242     0658  0875               	movf	___awdiv@sign,w
  1243     0659  1903               	btfsc	3,2
  1244     065A  2E5C               	goto	u421
  1245     065B  2E5D               	goto	u420
  1246     065C                     u421:
  1247     065C  2E62               	goto	l1130
  1248     065D                     u420:
  1249     065D                     l1128:
  1250     065D  09F6               	comf	___awdiv@quotient,f
  1251     065E  09F7               	comf	___awdiv@quotient+1,f
  1252     065F  0AF6               	incf	___awdiv@quotient,f
  1253     0660  1903               	skipnz
  1254     0661  0AF7               	incf	___awdiv@quotient+1,f
  1255     0662                     l1130:
  1256     0662  0877               	movf	___awdiv@quotient+1,w
  1257     0663  00F1               	movwf	?___awdiv+1
  1258     0664  0876               	movf	___awdiv@quotient,w
  1259     0665  00F0               	movwf	?___awdiv
  1260     0666                     l401:
  1261     0666  0008               	return
  1262     0667                     __end_of___awdiv:
  1263                           
  1264                           	psect	text4
  1265     0565                     __ptext4:	
  1266 ;; *************** function _LCD_Write_String *****************
  1267 ;; Defined at:
  1268 ;;		line 235 in file "main.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;  Str             2    6[COMMON] PTR unsigned char 
  1271 ;;		 -> main@str(30), STR_1(12), 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  i               2   11[COMMON] int 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  1    wreg      void 
  1276 ;; Registers used:
  1277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1283 ;;      Params:         2       0       0       0       0
  1284 ;;      Locals:         2       0       0       0       0
  1285 ;;      Temps:          3       0       0       0       0
  1286 ;;      Totals:         7       0       0       0       0
  1287 ;;Total ram usage:        7 bytes
  1288 ;; Hardware stack levels used: 1
  1289 ;; Hardware stack levels required when called: 5
  1290 ;; This function calls:
  1291 ;;		_LCD_Write_Char
  1292 ;; This function is called by:
  1293 ;;		_main
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297     0565                     _LCD_Write_String:	
  1298                           ;psect for function _LCD_Write_String
  1299                           
  1300     0565                     l1258:	
  1301                           ;incstack = 0
  1302                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1303                           
  1304                           
  1305                           ;main.c: 235: void LCD_Write_String(char* Str);main.c: 236: {;main.c: 237:   for(int i=0
      +                          ; Str[i]!='\0'; i++)
  1306     0565  01FB               	clrf	LCD_Write_String@i
  1307     0566  01FC               	clrf	LCD_Write_String@i+1
  1308     0567  2D8A               	goto	l1264
  1309     0568                     l1260:
  1310                           
  1311                           ;main.c: 238:     LCD_Write_Char(Str[i]);
  1312     0568  087B               	movf	LCD_Write_String@i,w
  1313     0569  0776               	addwf	LCD_Write_String@Str,w
  1314     056A  00F9               	movwf	??_LCD_Write_String+1
  1315     056B  0877               	movf	LCD_Write_String@Str+1,w
  1316     056C  00F8               	movwf	??_LCD_Write_String
  1317     056D  1803               	skipnc
  1318     056E  0AF8               	incf	??_LCD_Write_String,f
  1319     056F  1FFB               	btfss	LCD_Write_String@i,7
  1320     0570  2D72               	goto	u540
  1321     0571  03F8               	decf	??_LCD_Write_String,f
  1322     0572                     u540:
  1323     0572  0878               	movf	??_LCD_Write_String,w
  1324     0573  00FA               	movwf	??_LCD_Write_String+2
  1325     0574  087A               	movf	??_LCD_Write_String+2,w
  1326     0575  1283               	bcf	3,5	;RP0=0, select bank0
  1327     0576  1303               	bcf	3,6	;RP1=0, select bank0
  1328     0577  00FF               	movwf	btemp+1
  1329     0578  0879               	movf	??_LCD_Write_String+1,w
  1330     0579  0084               	movwf	4
  1331     057A  120A  118A  2003  120A  118A  	fcall	stringtab
  1332     057F  120A  118A  24D3  120A  118A  	fcall	_LCD_Write_Char
  1333     0584                     l1262:
  1334     0584  3001               	movlw	1
  1335     0585  07FB               	addwf	LCD_Write_String@i,f
  1336     0586  1803               	skipnc
  1337     0587  0AFC               	incf	LCD_Write_String@i+1,f
  1338     0588  3000               	movlw	0
  1339     0589  07FC               	addwf	LCD_Write_String@i+1,f
  1340     058A                     l1264:
  1341     058A  087B               	movf	LCD_Write_String@i,w
  1342     058B  0776               	addwf	LCD_Write_String@Str,w
  1343     058C  00F9               	movwf	??_LCD_Write_String+1
  1344     058D  0877               	movf	LCD_Write_String@Str+1,w
  1345     058E  00F8               	movwf	??_LCD_Write_String
  1346     058F  1803               	skipnc
  1347     0590  0AF8               	incf	??_LCD_Write_String,f
  1348     0591  1FFB               	btfss	LCD_Write_String@i,7
  1349     0592  2D94               	goto	u550
  1350     0593  03F8               	decf	??_LCD_Write_String,f
  1351     0594                     u550:
  1352     0594  0878               	movf	??_LCD_Write_String,w
  1353     0595  00FA               	movwf	??_LCD_Write_String+2
  1354     0596  087A               	movf	??_LCD_Write_String+2,w
  1355     0597  1283               	bcf	3,5	;RP0=0, select bank0
  1356     0598  1303               	bcf	3,6	;RP1=0, select bank0
  1357     0599  00FF               	movwf	btemp+1
  1358     059A  0879               	movf	??_LCD_Write_String+1,w
  1359     059B  0084               	movwf	4
  1360     059C  120A  118A  2003  120A  118A  	fcall	stringtab
  1361     05A1  3A00               	xorlw	0
  1362     05A2  1D03               	skipz
  1363     05A3  2DA5               	goto	u561
  1364     05A4  2DA6               	goto	u560
  1365     05A5                     u561:
  1366     05A5  2D68               	goto	l1260
  1367     05A6                     u560:
  1368     05A6                     l132:
  1369     05A6  0008               	return
  1370     05A7                     __end_of_LCD_Write_String:
  1371                           
  1372                           	psect	text5
  1373     04D3                     __ptext5:	
  1374 ;; *************** function _LCD_Write_Char *****************
  1375 ;; Defined at:
  1376 ;;		line 228 in file "main.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  Data            1    wreg     unsigned char 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  Data            1    5[COMMON] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         1       0       0       0       0
  1392 ;;      Temps:          1       0       0       0       0
  1393 ;;      Totals:         2       0       0       0       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 4
  1397 ;; This function calls:
  1398 ;;		_LCD_Write_4Bit
  1399 ;; This function is called by:
  1400 ;;		_LCD_Write_String
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404     04D3                     _LCD_Write_Char:	
  1405                           ;psect for function _LCD_Write_Char
  1406                           
  1407                           
  1408                           ;incstack = 0
  1409                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1410                           ;LCD_Write_Char@Data stored from wreg
  1411     04D3  00F5               	movwf	LCD_Write_Char@Data
  1412     04D4                     l1086:
  1413                           
  1414                           ;main.c: 228: void LCD_Write_Char(char Data);main.c: 229: {;main.c: 230:   RS = 1;
  1415     04D4  01FD               	clrf	_RS
  1416     04D5  0AFD               	incf	_RS,f
  1417     04D6                     l1088:
  1418                           
  1419                           ;main.c: 231:   LCD_Write_4Bit(Data & 0xF0);
  1420     04D6  0875               	movf	LCD_Write_Char@Data,w
  1421     04D7  39F0               	andlw	240
  1422     04D8  120A  118A  24A0  120A  118A  	fcall	_LCD_Write_4Bit
  1423                           
  1424                           ;main.c: 232:   LCD_Write_4Bit((Data << 4) & 0xF0);
  1425     04DD  0875               	movf	LCD_Write_Char@Data,w
  1426     04DE  00F4               	movwf	??_LCD_Write_Char
  1427     04DF  3003               	movlw	3
  1428     04E0                     u325:
  1429     04E0  1003               	clrc
  1430     04E1  0DF4               	rlf	??_LCD_Write_Char,f
  1431     04E2  3EFF               	addlw	-1
  1432     04E3  1D03               	skipz
  1433     04E4  2CE0               	goto	u325
  1434     04E5  1003               	clrc
  1435     04E6  0D74               	rlf	??_LCD_Write_Char,w
  1436     04E7  39F0               	andlw	240
  1437     04E8  120A  118A  24A0  120A  118A  	fcall	_LCD_Write_4Bit
  1438     04ED                     l126:
  1439     04ED  0008               	return
  1440     04EE                     __end_of_LCD_Write_Char:
  1441                           
  1442                           	psect	text6
  1443     052F                     __ptext6:	
  1444 ;; *************** function _LCD_Set_Cursor *****************
  1445 ;; Defined at:
  1446 ;;		line 241 in file "main.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  ROW             1    wreg     unsigned char 
  1449 ;;  COL             1    6[COMMON] unsigned char 
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;  ROW             1    9[COMMON] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      void 
  1454 ;; Registers used:
  1455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         1       0       0       0       0
  1462 ;;      Locals:         1       0       0       0       0
  1463 ;;      Temps:          2       0       0       0       0
  1464 ;;      Totals:         4       0       0       0       0
  1465 ;;Total ram usage:        4 bytes
  1466 ;; Hardware stack levels used: 1
  1467 ;; Hardware stack levels required when called: 5
  1468 ;; This function calls:
  1469 ;;		_LCD_CMD
  1470 ;; This function is called by:
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475     052F                     _LCD_Set_Cursor:	
  1476                           ;psect for function _LCD_Set_Cursor
  1477                           
  1478                           
  1479                           ;incstack = 0
  1480                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1481                           ;LCD_Set_Cursor@ROW stored from wreg
  1482     052F  00F9               	movwf	LCD_Set_Cursor@ROW
  1483     0530                     l1242:
  1484                           
  1485                           ;main.c: 241: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);main.c: 242: {;m
      +                          ain.c: 243:   switch(ROW)
  1486     0530  2D51               	goto	l1252
  1487     0531                     l1244:
  1488                           
  1489                           ;main.c: 246:       LCD_CMD(0xC0 + COL-1);
  1490     0531  0876               	movf	LCD_Set_Cursor@COL,w
  1491     0532  3EBF               	addlw	191
  1492     0533  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1493                           
  1494                           ;main.c: 247:       break;
  1495     0538  2D64               	goto	l141
  1496     0539                     l1246:
  1497                           
  1498                           ;main.c: 249:       LCD_CMD(0x94 + COL-1);
  1499     0539  0876               	movf	LCD_Set_Cursor@COL,w
  1500     053A  3E93               	addlw	147
  1501     053B  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1502                           
  1503                           ;main.c: 250:       break;
  1504     0540  2D64               	goto	l141
  1505     0541                     l1248:
  1506                           
  1507                           ;main.c: 252:       LCD_CMD(0xD4 + COL-1);
  1508     0541  0876               	movf	LCD_Set_Cursor@COL,w
  1509     0542  3ED3               	addlw	211
  1510     0543  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1511                           
  1512                           ;main.c: 253:       break;
  1513     0548  2D64               	goto	l141
  1514     0549                     l1250:
  1515                           
  1516                           ;main.c: 256:       LCD_CMD(0x80 + COL-1);
  1517     0549  0876               	movf	LCD_Set_Cursor@COL,w
  1518     054A  3E7F               	addlw	127
  1519     054B  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1520                           
  1521                           ;main.c: 257:   }
  1522     0550  2D64               	goto	l141
  1523     0551                     l1252:
  1524     0551  0879               	movf	LCD_Set_Cursor@ROW,w
  1525     0552  00F7               	movwf	??_LCD_Set_Cursor
  1526     0553  01F8               	clrf	??_LCD_Set_Cursor+1
  1527                           
  1528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1529                           ; Switch size 1, requested type "simple"
  1530                           ; Number of cases is 1, Range of values is 0 to 0
  1531                           ; switch strategies available:
  1532                           ; Name         Instructions Cycles
  1533                           ; simple_byte            4     3 (average)
  1534                           ; direct_byte           11     8 (fixed)
  1535                           ; jumptable            260     6 (fixed)
  1536                           ;	Chosen strategy is simple_byte
  1537     0554  0878               	movf	??_LCD_Set_Cursor+1,w
  1538     0555  3A00               	xorlw	0	; case 0
  1539     0556  1903               	skipnz
  1540     0557  2D59               	goto	l1382
  1541     0558  2D49               	goto	l1250
  1542     0559                     l1382:
  1543                           
  1544                           ; Switch size 1, requested type "simple"
  1545                           ; Number of cases is 3, Range of values is 2 to 4
  1546                           ; switch strategies available:
  1547                           ; Name         Instructions Cycles
  1548                           ; simple_byte           10     6 (average)
  1549                           ; direct_byte           20    11 (fixed)
  1550                           ; jumptable            263     9 (fixed)
  1551                           ;	Chosen strategy is simple_byte
  1552     0559  0877               	movf	??_LCD_Set_Cursor,w
  1553     055A  3A02               	xorlw	2	; case 2
  1554     055B  1903               	skipnz
  1555     055C  2D31               	goto	l1244
  1556     055D  3A01               	xorlw	1	; case 3
  1557     055E  1903               	skipnz
  1558     055F  2D39               	goto	l1246
  1559     0560  3A07               	xorlw	7	; case 4
  1560     0561  1903               	skipnz
  1561     0562  2D41               	goto	l1248
  1562     0563  2D49               	goto	l1250
  1563     0564                     l141:
  1564     0564  0008               	return
  1565     0565                     __end_of_LCD_Set_Cursor:
  1566                           
  1567                           	psect	text7
  1568     076C                     __ptext7:	
  1569 ;; *************** function _LCD_Init *****************
  1570 ;; Defined at:
  1571 ;;		line 181 in file "main.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;  I2C_Add         1    wreg     unsigned char 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  I2C_Add         1    8[COMMON] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1585 ;;      Params:         0       0       0       0       0
  1586 ;;      Locals:         1       0       0       0       0
  1587 ;;      Temps:          2       0       0       0       0
  1588 ;;      Totals:         3       0       0       0       0
  1589 ;;Total ram usage:        3 bytes
  1590 ;; Hardware stack levels used: 1
  1591 ;; Hardware stack levels required when called: 5
  1592 ;; This function calls:
  1593 ;;		_IO_Expander_Write
  1594 ;;		_LCD_CMD
  1595 ;; This function is called by:
  1596 ;;		_main
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600     076C                     _LCD_Init:	
  1601                           ;psect for function _LCD_Init
  1602                           
  1603                           
  1604                           ;incstack = 0
  1605                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1606                           ;LCD_Init@I2C_Add stored from wreg
  1607     076C  00F8               	movwf	LCD_Init@I2C_Add
  1608     076D                     l1204:
  1609                           
  1610                           ;main.c: 181: void LCD_Init(unsigned char I2C_Add);main.c: 182: {;main.c: 183:   i2c_add
      +                           = I2C_Add;
  1611     076D  0878               	movf	LCD_Init@I2C_Add,w
  1612     076E  1283               	bcf	3,5	;RP0=0, select bank0
  1613     076F  1303               	bcf	3,6	;RP1=0, select bank0
  1614     0770  00CA               	movwf	_i2c_add
  1615     0771                     l1206:
  1616                           
  1617                           ;main.c: 184:   IO_Expander_Write(0x00);
  1618     0771  3000               	movlw	0
  1619     0772  120A  118A  24EE  120A  118A  	fcall	_IO_Expander_Write
  1620     0777                     l1208:
  1621                           
  1622                           ;main.c: 185:   _delay((unsigned long)((30)*(4000000/4000.0)));
  1623     0777  3027               	movlw	39
  1624     0778  00F7               	movwf	??_LCD_Init+1
  1625     0779  30F5               	movlw	245
  1626     077A  00F6               	movwf	??_LCD_Init
  1627     077B                     u597:
  1628     077B  0BF6               	decfsz	??_LCD_Init,f
  1629     077C  2F7B               	goto	u597
  1630     077D  0BF7               	decfsz	??_LCD_Init+1,f
  1631     077E  2F7B               	goto	u597
  1632     077F                     l1210:
  1633                           
  1634                           ;main.c: 186:   LCD_CMD(0x03);
  1635     077F  3003               	movlw	3
  1636     0780  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1637     0785                     l1212:
  1638                           
  1639                           ;main.c: 187:   _delay((unsigned long)((5)*(4000000/4000.0)));
  1640     0785  3007               	movlw	7
  1641     0786  00F7               	movwf	??_LCD_Init+1
  1642     0787  307D               	movlw	125
  1643     0788  00F6               	movwf	??_LCD_Init
  1644     0789                     u607:
  1645     0789  0BF6               	decfsz	??_LCD_Init,f
  1646     078A  2F89               	goto	u607
  1647     078B  0BF7               	decfsz	??_LCD_Init+1,f
  1648     078C  2F89               	goto	u607
  1649     078D                     l1214:
  1650                           
  1651                           ;main.c: 188:   LCD_CMD(0x03);
  1652     078D  3003               	movlw	3
  1653     078E  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1654     0793                     l1216:
  1655                           
  1656                           ;main.c: 189:   _delay((unsigned long)((5)*(4000000/4000.0)));
  1657     0793  3007               	movlw	7
  1658     0794  00F7               	movwf	??_LCD_Init+1
  1659     0795  307D               	movlw	125
  1660     0796  00F6               	movwf	??_LCD_Init
  1661     0797                     u617:
  1662     0797  0BF6               	decfsz	??_LCD_Init,f
  1663     0798  2F97               	goto	u617
  1664     0799  0BF7               	decfsz	??_LCD_Init+1,f
  1665     079A  2F97               	goto	u617
  1666     079B                     l1218:
  1667                           
  1668                           ;main.c: 190:   LCD_CMD(0x03);
  1669     079B  3003               	movlw	3
  1670     079C  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1671     07A1                     l1220:
  1672                           
  1673                           ;main.c: 191:   _delay((unsigned long)((5)*(4000000/4000.0)));
  1674     07A1  3007               	movlw	7
  1675     07A2  00F7               	movwf	??_LCD_Init+1
  1676     07A3  307D               	movlw	125
  1677     07A4  00F6               	movwf	??_LCD_Init
  1678     07A5                     u627:
  1679     07A5  0BF6               	decfsz	??_LCD_Init,f
  1680     07A6  2FA5               	goto	u627
  1681     07A7  0BF7               	decfsz	??_LCD_Init+1,f
  1682     07A8  2FA5               	goto	u627
  1683     07A9                     l1222:
  1684                           
  1685                           ;main.c: 192:   LCD_CMD(0x02);
  1686     07A9  3002               	movlw	2
  1687     07AA  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1688     07AF                     l1224:
  1689                           
  1690                           ;main.c: 193:   _delay((unsigned long)((5)*(4000000/4000.0)));
  1691     07AF  3007               	movlw	7
  1692     07B0  00F7               	movwf	??_LCD_Init+1
  1693     07B1  307D               	movlw	125
  1694     07B2  00F6               	movwf	??_LCD_Init
  1695     07B3                     u637:
  1696     07B3  0BF6               	decfsz	??_LCD_Init,f
  1697     07B4  2FB3               	goto	u637
  1698     07B5  0BF7               	decfsz	??_LCD_Init+1,f
  1699     07B6  2FB3               	goto	u637
  1700     07B7                     l1226:
  1701                           
  1702                           ;main.c: 194:   LCD_CMD(0x20 | (2 << 2));
  1703     07B7  3028               	movlw	40
  1704     07B8  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1705     07BD                     l1228:
  1706                           
  1707                           ;main.c: 195:   _delay((unsigned long)((50)*(4000000/4000.0)));
  1708     07BD  3041               	movlw	65
  1709     07BE  00F7               	movwf	??_LCD_Init+1
  1710     07BF  30EE               	movlw	238
  1711     07C0  00F6               	movwf	??_LCD_Init
  1712     07C1                     u647:
  1713     07C1  0BF6               	decfsz	??_LCD_Init,f
  1714     07C2  2FC1               	goto	u647
  1715     07C3  0BF7               	decfsz	??_LCD_Init+1,f
  1716     07C4  2FC1               	goto	u647
  1717     07C5  0000               	nop
  1718     07C6                     l1230:
  1719                           
  1720                           ;main.c: 196:   LCD_CMD(0x0C);
  1721     07C6  300C               	movlw	12
  1722     07C7  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1723     07CC                     l1232:
  1724                           
  1725                           ;main.c: 197:   _delay((unsigned long)((50)*(4000000/4000.0)));
  1726     07CC  3041               	movlw	65
  1727     07CD  00F7               	movwf	??_LCD_Init+1
  1728     07CE  30EE               	movlw	238
  1729     07CF  00F6               	movwf	??_LCD_Init
  1730     07D0                     u657:
  1731     07D0  0BF6               	decfsz	??_LCD_Init,f
  1732     07D1  2FD0               	goto	u657
  1733     07D2  0BF7               	decfsz	??_LCD_Init+1,f
  1734     07D3  2FD0               	goto	u657
  1735     07D4  0000               	nop
  1736     07D5                     l1234:
  1737                           
  1738                           ;main.c: 198:   LCD_CMD(0x01);
  1739     07D5  3001               	movlw	1
  1740     07D6  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1741     07DB                     l1236:
  1742                           
  1743                           ;main.c: 199:   _delay((unsigned long)((50)*(4000000/4000.0)));
  1744     07DB  3041               	movlw	65
  1745     07DC  00F7               	movwf	??_LCD_Init+1
  1746     07DD  30EE               	movlw	238
  1747     07DE  00F6               	movwf	??_LCD_Init
  1748     07DF                     u667:
  1749     07DF  0BF6               	decfsz	??_LCD_Init,f
  1750     07E0  2FDF               	goto	u667
  1751     07E1  0BF7               	decfsz	??_LCD_Init+1,f
  1752     07E2  2FDF               	goto	u667
  1753     07E3  0000               	nop
  1754     07E4                     l1238:
  1755                           
  1756                           ;main.c: 200:   LCD_CMD(0x04 | 0x02);
  1757     07E4  3006               	movlw	6
  1758     07E5  120A  118A  24B9  120A  118A  	fcall	_LCD_CMD
  1759     07EA                     l1240:
  1760                           
  1761                           ;main.c: 201:   _delay((unsigned long)((50)*(4000000/4000.0)));
  1762     07EA  3041               	movlw	65
  1763     07EB  00F7               	movwf	??_LCD_Init+1
  1764     07EC  30EE               	movlw	238
  1765     07ED  00F6               	movwf	??_LCD_Init
  1766     07EE                     u677:
  1767     07EE  0BF6               	decfsz	??_LCD_Init,f
  1768     07EF  2FEE               	goto	u677
  1769     07F0  0BF7               	decfsz	??_LCD_Init+1,f
  1770     07F1  2FEE               	goto	u677
  1771     07F2  0000               	nop
  1772     07F3                     l114:
  1773     07F3  0008               	return
  1774     07F4                     __end_of_LCD_Init:
  1775                           
  1776                           	psect	text8
  1777     04B9                     __ptext8:	
  1778 ;; *************** function _LCD_CMD *****************
  1779 ;; Defined at:
  1780 ;;		line 221 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  CMD             1    wreg     unsigned char 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  CMD             1    5[COMMON] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1794 ;;      Params:         0       0       0       0       0
  1795 ;;      Locals:         1       0       0       0       0
  1796 ;;      Temps:          1       0       0       0       0
  1797 ;;      Totals:         2       0       0       0       0
  1798 ;;Total ram usage:        2 bytes
  1799 ;; Hardware stack levels used: 1
  1800 ;; Hardware stack levels required when called: 4
  1801 ;; This function calls:
  1802 ;;		_LCD_Write_4Bit
  1803 ;; This function is called by:
  1804 ;;		_LCD_Init
  1805 ;;		_LCD_Set_Cursor
  1806 ;;		_LCD_SL
  1807 ;;		_LCD_SR
  1808 ;;		_LCD_Clear
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812     04B9                     _LCD_CMD:	
  1813                           ;psect for function _LCD_CMD
  1814                           
  1815                           
  1816                           ;incstack = 0
  1817                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1818                           ;LCD_CMD@CMD stored from wreg
  1819     04B9  00F5               	movwf	LCD_CMD@CMD
  1820     04BA                     l1080:
  1821                           
  1822                           ;main.c: 221: void LCD_CMD(unsigned char CMD);main.c: 222: {;main.c: 223:   RS = 0;
  1823     04BA  01FD               	clrf	_RS
  1824     04BB                     l1082:
  1825                           
  1826                           ;main.c: 224:   LCD_Write_4Bit(CMD & 0xF0);
  1827     04BB  0875               	movf	LCD_CMD@CMD,w
  1828     04BC  39F0               	andlw	240
  1829     04BD  120A  118A  24A0  120A  118A  	fcall	_LCD_Write_4Bit
  1830     04C2                     l1084:
  1831                           
  1832                           ;main.c: 225:   LCD_Write_4Bit((CMD << 4) & 0xF0);
  1833     04C2  0875               	movf	LCD_CMD@CMD,w
  1834     04C3  00F4               	movwf	??_LCD_CMD
  1835     04C4  3003               	movlw	3
  1836     04C5                     u315:
  1837     04C5  1003               	clrc
  1838     04C6  0DF4               	rlf	??_LCD_CMD,f
  1839     04C7  3EFF               	addlw	-1
  1840     04C8  1D03               	skipz
  1841     04C9  2CC5               	goto	u315
  1842     04CA  1003               	clrc
  1843     04CB  0D74               	rlf	??_LCD_CMD,w
  1844     04CC  39F0               	andlw	240
  1845     04CD  120A  118A  24A0  120A  118A  	fcall	_LCD_Write_4Bit
  1846     04D2                     l123:
  1847     04D2  0008               	return
  1848     04D3                     __end_of_LCD_CMD:
  1849                           
  1850                           	psect	text9
  1851     04A0                     __ptext9:	
  1852 ;; *************** function _LCD_Write_4Bit *****************
  1853 ;; Defined at:
  1854 ;;		line 212 in file "main.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  Nibble          1    wreg     unsigned char 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  Nibble          1    3[COMMON] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1868 ;;      Params:         0       0       0       0       0
  1869 ;;      Locals:         1       0       0       0       0
  1870 ;;      Temps:          1       0       0       0       0
  1871 ;;      Totals:         2       0       0       0       0
  1872 ;;Total ram usage:        2 bytes
  1873 ;; Hardware stack levels used: 1
  1874 ;; Hardware stack levels required when called: 3
  1875 ;; This function calls:
  1876 ;;		_IO_Expander_Write
  1877 ;; This function is called by:
  1878 ;;		_LCD_CMD
  1879 ;;		_LCD_Write_Char
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883     04A0                     _LCD_Write_4Bit:	
  1884                           ;psect for function _LCD_Write_4Bit
  1885                           
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1889                           ;LCD_Write_4Bit@Nibble stored from wreg
  1890     04A0  00F3               	movwf	LCD_Write_4Bit@Nibble
  1891     04A1                     l1068:
  1892                           
  1893                           ;main.c: 212: void LCD_Write_4Bit(unsigned char Nibble);main.c: 213: {;main.c: 215:   Ni
      +                          bble |= RS;
  1894     04A1  087D               	movf	_RS,w
  1895     04A2  00FF               	movwf	btemp+1
  1896     04A3  087F               	movf	btemp+1,w
  1897     04A4  04F3               	iorwf	LCD_Write_4Bit@Nibble,f
  1898     04A5                     l1070:
  1899                           
  1900                           ;main.c: 216:   IO_Expander_Write(Nibble | 0x04);
  1901     04A5  0873               	movf	LCD_Write_4Bit@Nibble,w
  1902     04A6  3804               	iorlw	4
  1903     04A7  120A  118A  24EE  120A  118A  	fcall	_IO_Expander_Write
  1904     04AC                     l1072:
  1905                           
  1906                           ;main.c: 217:   IO_Expander_Write(Nibble & 0xFB);
  1907     04AC  0873               	movf	LCD_Write_4Bit@Nibble,w
  1908     04AD  39FB               	andlw	251
  1909     04AE  120A  118A  24EE  120A  118A  	fcall	_IO_Expander_Write
  1910                           
  1911                           ;main.c: 218:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  1912     04B3  3010               	movlw	16
  1913     04B4  00F2               	movwf	??_LCD_Write_4Bit
  1914     04B5                     u687:
  1915     04B5  0BF2               	decfsz	??_LCD_Write_4Bit,f
  1916     04B6  2CB5               	goto	u687
  1917     04B7  0000               	nop
  1918     04B8                     l120:
  1919     04B8  0008               	return
  1920     04B9                     __end_of_LCD_Write_4Bit:
  1921                           
  1922                           	psect	text10
  1923     04EE                     __ptext10:	
  1924 ;; *************** function _IO_Expander_Write *****************
  1925 ;; Defined at:
  1926 ;;		line 204 in file "main.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  Data            1    wreg     unsigned char 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  Data            1    1[COMMON] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, pclath, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         0       0       0       0       0
  1941 ;;      Locals:         1       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0
  1943 ;;      Totals:         1       0       0       0       0
  1944 ;;Total ram usage:        1 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; Hardware stack levels required when called: 2
  1947 ;; This function calls:
  1948 ;;		_I2C_Start
  1949 ;;		_I2C_Stop
  1950 ;;		_I2C_Write
  1951 ;; This function is called by:
  1952 ;;		_LCD_Init
  1953 ;;		_LCD_Write_4Bit
  1954 ;;		_Backlight
  1955 ;;		_noBacklight
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959     04EE                     _IO_Expander_Write:	
  1960                           ;psect for function _IO_Expander_Write
  1961                           
  1962                           
  1963                           ;incstack = 0
  1964                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  1965                           ;IO_Expander_Write@Data stored from wreg
  1966     04EE  00F1               	movwf	IO_Expander_Write@Data
  1967     04EF                     l1066:
  1968                           
  1969                           ;main.c: 204: void IO_Expander_Write(unsigned char Data);main.c: 205: {;main.c: 206:   I
      +                          2C_Start();
  1970     04EF  120A  118A  2442  120A  118A  	fcall	_I2C_Start
  1971                           
  1972                           ;main.c: 207:   I2C_Write(i2c_add);
  1973     04F4  1283               	bcf	3,5	;RP0=0, select bank0
  1974     04F5  1303               	bcf	3,6	;RP1=0, select bank0
  1975     04F6  084A               	movf	_i2c_add,w
  1976     04F7  120A  118A  2478  120A  118A  	fcall	_I2C_Write
  1977                           
  1978                           ;main.c: 208:   I2C_Write(Data | BackLight_State);
  1979     04FC  0871               	movf	IO_Expander_Write@Data,w
  1980     04FD  1283               	bcf	3,5	;RP0=0, select bank0
  1981     04FE  1303               	bcf	3,6	;RP1=0, select bank0
  1982     04FF  044C               	iorwf	_BackLight_State,w
  1983     0500  120A  118A  2478  120A  118A  	fcall	_I2C_Write
  1984                           
  1985                           ;main.c: 209:   I2C_Stop();
  1986     0505  120A  118A  244B  120A  118A  	fcall	_I2C_Stop
  1987     050A                     l117:
  1988     050A  0008               	return
  1989     050B                     __end_of_IO_Expander_Write:
  1990                           
  1991                           	psect	text11
  1992     0488                     __ptext11:	
  1993 ;; *************** function _I2C_Read *****************
  1994 ;; Defined at:
  1995 ;;		line 166 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  Data            1    0[COMMON] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      unsigned char 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0, pclath, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2009 ;;      Params:         0       0       0       0       0
  2010 ;;      Locals:         1       0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0
  2012 ;;      Totals:         1       0       0       0       0
  2013 ;;Total ram usage:        1 bytes
  2014 ;; Hardware stack levels used: 1
  2015 ;; Hardware stack levels required when called: 2
  2016 ;; This function calls:
  2017 ;;		_I2C_NACK
  2018 ;;		_I2C_Wait
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;;		_EEPROM_Read
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025     0488                     _I2C_Read:	
  2026                           ;psect for function _I2C_Read
  2027                           
  2028     0488                     l1266:	
  2029                           ;incstack = 0
  2030                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  2031                           
  2032                           
  2033                           ;main.c: 168:   unsigned char Data;;main.c: 169:   I2C_Wait();
  2034     0488  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2035     048D                     l1268:
  2036                           
  2037                           ;main.c: 170:   SSPCON2bits.RCEN = 1;
  2038     048D  1683               	bsf	3,5	;RP0=1, select bank1
  2039     048E  1303               	bcf	3,6	;RP1=0, select bank1
  2040     048F  1591               	bsf	17,3	;volatile
  2041                           
  2042                           ;main.c: 171:   I2C_Wait();
  2043     0490  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2044     0495                     l1270:
  2045                           
  2046                           ;main.c: 172:   Data = SSPBUF;
  2047     0495  1283               	bcf	3,5	;RP0=0, select bank0
  2048     0496  1303               	bcf	3,6	;RP1=0, select bank0
  2049     0497  0813               	movf	19,w	;volatile
  2050     0498  00F0               	movwf	I2C_Read@Data
  2051     0499                     l1272:
  2052                           
  2053                           ;main.c: 173:   I2C_NACK();
  2054     0499  120A  118A  2454  120A  118A  	fcall	_I2C_NACK
  2055                           
  2056                           ;main.c: 174:   return Data;
  2057     049E  0870               	movf	I2C_Read@Data,w
  2058     049F                     l111:
  2059     049F  0008               	return
  2060     04A0                     __end_of_I2C_Read:
  2061                           
  2062                           	psect	text12
  2063     0454                     __ptext12:	
  2064 ;; *************** function _I2C_NACK *****************
  2065 ;; Defined at:
  2066 ;;		line 150 in file "main.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0, pclath, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2080 ;;      Params:         0       0       0       0       0
  2081 ;;      Locals:         0       0       0       0       0
  2082 ;;      Temps:          0       0       0       0       0
  2083 ;;      Totals:         0       0       0       0       0
  2084 ;;Total ram usage:        0 bytes
  2085 ;; Hardware stack levels used: 1
  2086 ;; Hardware stack levels required when called: 1
  2087 ;; This function calls:
  2088 ;;		_I2C_Wait
  2089 ;; This function is called by:
  2090 ;;		_I2C_Read
  2091 ;;		_EEPROM_Read
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095     0454                     _I2C_NACK:	
  2096                           ;psect for function _I2C_NACK
  2097                           
  2098     0454                     l1074:	
  2099                           ;incstack = 0
  2100                           ; Regs used in _I2C_NACK: [wreg+status,2+status,0+pclath+cstack]
  2101                           
  2102                           
  2103                           ;main.c: 153:   I2C_Wait();
  2104     0454  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2105     0459                     l1076:
  2106                           
  2107                           ;main.c: 154:   ACKDT = 1;
  2108     0459  1683               	bsf	3,5	;RP0=1, select bank1
  2109     045A  1303               	bcf	3,6	;RP1=0, select bank1
  2110     045B  1691               	bsf	17,5	;volatile
  2111     045C                     l1078:
  2112                           
  2113                           ;main.c: 155:   ACKEN = 1;
  2114     045C  1611               	bsf	17,4	;volatile
  2115     045D                     l105:
  2116     045D  0008               	return
  2117     045E                     __end_of_I2C_NACK:
  2118                           
  2119                           	psect	text13
  2120     046B                     __ptext13:	
  2121 ;; *************** function _I2C_Master_Init *****************
  2122 ;; Defined at:
  2123 ;;		line 112 in file "main.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, status,2
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2137 ;;      Params:         0       0       0       0       0
  2138 ;;      Locals:         0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0
  2140 ;;      Totals:         0       0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used: 1
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_main
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150     046B                     _I2C_Master_Init:	
  2151                           ;psect for function _I2C_Master_Init
  2152                           
  2153     046B                     l1194:	
  2154                           ;incstack = 0
  2155                           ; Regs used in _I2C_Master_Init: [wreg+status,2]
  2156                           
  2157                           
  2158                           ;main.c: 114:   SSPCON = 0x28;
  2159     046B  3028               	movlw	40
  2160     046C  1283               	bcf	3,5	;RP0=0, select bank0
  2161     046D  1303               	bcf	3,6	;RP1=0, select bank0
  2162     046E  0094               	movwf	20	;volatile
  2163     046F                     l1196:
  2164                           
  2165                           ;main.c: 115:   SSPCON2 = 0x00;
  2166     046F  1683               	bsf	3,5	;RP0=1, select bank1
  2167     0470  1303               	bcf	3,6	;RP1=0, select bank1
  2168     0471  0191               	clrf	17	;volatile
  2169     0472                     l1198:
  2170                           
  2171                           ;main.c: 116:   SSPSTAT = 0x00;
  2172     0472  0194               	clrf	20	;volatile
  2173                           
  2174                           ;main.c: 117:   SSPADD = ((4000000/4)/100000) - 1;
  2175     0473  3009               	movlw	9
  2176     0474  0093               	movwf	19	;volatile
  2177     0475                     l1200:
  2178                           
  2179                           ;main.c: 118:   TRISC3 = 1;
  2180     0475  1587               	bsf	7,3	;volatile
  2181     0476                     l1202:
  2182                           
  2183                           ;main.c: 119:   TRISC4 = 1;
  2184     0476  1607               	bsf	7,4	;volatile
  2185     0477                     l84:
  2186     0477  0008               	return
  2187     0478                     __end_of_I2C_Master_Init:
  2188                           
  2189                           	psect	text14
  2190     050B                     __ptext14:	
  2191 ;; *************** function _EEPROM_write *****************
  2192 ;; Defined at:
  2193 ;;		line 291 in file "main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  Address_High    1    wreg     unsigned char 
  2196 ;;  Address_LOW     1    1[COMMON] unsigned char 
  2197 ;;  data            1    2[COMMON] unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  Address_High    1    3[COMMON] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2209 ;;      Params:         2       0       0       0       0
  2210 ;;      Locals:         1       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0
  2212 ;;      Totals:         3       0       0       0       0
  2213 ;;Total ram usage:        3 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; Hardware stack levels required when called: 2
  2216 ;; This function calls:
  2217 ;;		_I2C_Start
  2218 ;;		_I2C_Stop
  2219 ;;		_I2C_Write
  2220 ;; This function is called by:
  2221 ;;		_main
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225     050B                     _EEPROM_write:	
  2226                           ;psect for function _EEPROM_write
  2227                           
  2228                           
  2229                           ;incstack = 0
  2230                           ; Regs used in _EEPROM_write: [wreg+status,2+status,0+pclath+cstack]
  2231                           ;EEPROM_write@Address_High stored from wreg
  2232     050B  00F3               	movwf	EEPROM_write@Address_High
  2233     050C                     l1276:
  2234                           
  2235                           ;main.c: 291: void EEPROM_write(char Address_High,char Address_LOW,unsigned char data);m
      +                          ain.c: 292: {;main.c: 293:     I2C_Start();
  2236     050C  120A  118A  2442  120A  118A  	fcall	_I2C_Start
  2237                           
  2238                           ;main.c: 294:     I2C_Write(0xA0);
  2239     0511  30A0               	movlw	160
  2240     0512  120A  118A  2478  120A  118A  	fcall	_I2C_Write
  2241                           
  2242                           ;main.c: 295:     I2C_Write(Address_High);
  2243     0517  0873               	movf	EEPROM_write@Address_High,w
  2244     0518  120A  118A  2478  120A  118A  	fcall	_I2C_Write
  2245                           
  2246                           ;main.c: 296:     I2C_Write(Address_LOW);
  2247     051D  0871               	movf	EEPROM_write@Address_LOW,w
  2248     051E  120A  118A  2478  120A  118A  	fcall	_I2C_Write
  2249                           
  2250                           ;main.c: 297:     I2C_Write(data);
  2251     0523  0872               	movf	EEPROM_write@data,w
  2252     0524  120A  118A  2478  120A  118A  	fcall	_I2C_Write
  2253                           
  2254                           ;main.c: 298:     I2C_Stop();
  2255     0529  120A  118A  244B  120A  118A  	fcall	_I2C_Stop
  2256     052E                     l159:
  2257     052E  0008               	return
  2258     052F                     __end_of_EEPROM_write:
  2259                           
  2260                           	psect	text15
  2261     0478                     __ptext15:	
  2262 ;; *************** function _I2C_Write *****************
  2263 ;; Defined at:
  2264 ;;		line 157 in file "main.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  Data            1    wreg     unsigned char 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  Data            1    0[COMMON] unsigned char 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      unsigned char 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0, pclath, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2278 ;;      Params:         0       0       0       0       0
  2279 ;;      Locals:         1       0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0
  2281 ;;      Totals:         1       0       0       0       0
  2282 ;;Total ram usage:        1 bytes
  2283 ;; Hardware stack levels used: 1
  2284 ;; Hardware stack levels required when called: 1
  2285 ;; This function calls:
  2286 ;;		_I2C_Wait
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;;		_IO_Expander_Write
  2290 ;;		_EEPROM_write
  2291 ;;		_EEPROM_Read
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295     0478                     _I2C_Write:	
  2296                           ;psect for function _I2C_Write
  2297                           
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  2301                           ;I2C_Write@Data stored from wreg
  2302     0478  00F0               	movwf	I2C_Write@Data
  2303     0479                     l1052:
  2304                           
  2305                           ;main.c: 157: unsigned char I2C_Write(unsigned char Data);main.c: 158: {;main.c: 160:   
      +                          I2C_Wait();
  2306     0479  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2307     047E                     l1054:
  2308                           
  2309                           ;main.c: 161:   SSPBUF = Data;
  2310     047E  0870               	movf	I2C_Write@Data,w
  2311     047F  1283               	bcf	3,5	;RP0=0, select bank0
  2312     0480  1303               	bcf	3,6	;RP1=0, select bank0
  2313     0481  0093               	movwf	19	;volatile
  2314     0482                     l1056:
  2315                           
  2316                           ;main.c: 162:   I2C_Wait();
  2317     0482  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2318     0487                     l1058:
  2319     0487                     l108:	
  2320                           ;main.c: 163:   return ACKSTAT;;	Return value of _I2C_Write is never used
  2321                           
  2322     0487  0008               	return
  2323     0488                     __end_of_I2C_Write:
  2324                           
  2325                           	psect	text16
  2326     044B                     __ptext16:	
  2327 ;; *************** function _I2C_Stop *****************
  2328 ;; Defined at:
  2329 ;;		line 131 in file "main.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      void 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0, pclath, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2343 ;;      Params:         0       0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0
  2345 ;;      Temps:          0       0       0       0       0
  2346 ;;      Totals:         0       0       0       0       0
  2347 ;;Total ram usage:        0 bytes
  2348 ;; Hardware stack levels used: 1
  2349 ;; Hardware stack levels required when called: 1
  2350 ;; This function calls:
  2351 ;;		_I2C_Wait
  2352 ;; This function is called by:
  2353 ;;		_main
  2354 ;;		_IO_Expander_Write
  2355 ;;		_EEPROM_write
  2356 ;;		_EEPROM_Read
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360     044B                     _I2C_Stop:	
  2361                           ;psect for function _I2C_Stop
  2362                           
  2363     044B                     l1062:	
  2364                           ;incstack = 0
  2365                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  2366                           
  2367                           
  2368                           ;main.c: 134:   I2C_Wait();
  2369     044B  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2370     0450                     l1064:
  2371                           
  2372                           ;main.c: 135:   PEN = 1;
  2373     0450  1683               	bsf	3,5	;RP0=1, select bank1
  2374     0451  1303               	bcf	3,6	;RP1=0, select bank1
  2375     0452  1511               	bsf	17,2	;volatile
  2376     0453                     l96:
  2377     0453  0008               	return
  2378     0454                     __end_of_I2C_Stop:
  2379                           
  2380                           	psect	text17
  2381     0442                     __ptext17:	
  2382 ;; *************** function _I2C_Start *****************
  2383 ;; Defined at:
  2384 ;;		line 125 in file "main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, pclath, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2398 ;;      Params:         0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0
  2401 ;;      Totals:         0       0       0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used: 1
  2404 ;; Hardware stack levels required when called: 1
  2405 ;; This function calls:
  2406 ;;		_I2C_Wait
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;;		_IO_Expander_Write
  2410 ;;		_EEPROM_write
  2411 ;;		_EEPROM_Read
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415     0442                     _I2C_Start:	
  2416                           ;psect for function _I2C_Start
  2417                           
  2418     0442                     l1048:	
  2419                           ;incstack = 0
  2420                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  2421                           
  2422                           
  2423                           ;main.c: 128:   I2C_Wait();
  2424     0442  120A  118A  245E  120A  118A  	fcall	_I2C_Wait
  2425     0447                     l1050:
  2426                           
  2427                           ;main.c: 129:   SEN = 1;
  2428     0447  1683               	bsf	3,5	;RP0=1, select bank1
  2429     0448  1303               	bcf	3,6	;RP1=0, select bank1
  2430     0449  1411               	bsf	17,0	;volatile
  2431     044A                     l93:
  2432     044A  0008               	return
  2433     044B                     __end_of_I2C_Start:
  2434                           
  2435                           	psect	text18
  2436     045E                     __ptext18:	
  2437 ;; *************** function _I2C_Wait *****************
  2438 ;; Defined at:
  2439 ;;		line 121 in file "main.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2453 ;;      Params:         0       0       0       0       0
  2454 ;;      Locals:         0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0
  2456 ;;      Totals:         0       0       0       0       0
  2457 ;;Total ram usage:        0 bytes
  2458 ;; Hardware stack levels used: 1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_I2C_Start
  2463 ;;		_I2C_Stop
  2464 ;;		_I2C_NACK
  2465 ;;		_I2C_Write
  2466 ;;		_I2C_Read
  2467 ;;		_I2C_Restart
  2468 ;;		_I2C_ACK
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472     045E                     _I2C_Wait:	
  2473                           ;psect for function _I2C_Wait
  2474                           
  2475     045E                     l1044:	
  2476                           ;incstack = 0
  2477                           ; Regs used in _I2C_Wait: [wreg+status,2]
  2478                           
  2479     045E                     l87:	
  2480                           ;main.c: 123:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2481                           
  2482     045E  1683               	bsf	3,5	;RP0=1, select bank1
  2483     045F  1303               	bcf	3,6	;RP1=0, select bank1
  2484     0460  1914               	btfsc	20,2	;volatile
  2485     0461  2C63               	goto	u291
  2486     0462  2C64               	goto	u290
  2487     0463                     u291:
  2488     0463  2C5E               	goto	l87
  2489     0464                     u290:
  2490     0464                     l1046:
  2491     0464  0811               	movf	17,w	;volatile
  2492     0465  391F               	andlw	31
  2493     0466  1D03               	btfss	3,2
  2494     0467  2C69               	goto	u301
  2495     0468  2C6A               	goto	u300
  2496     0469                     u301:
  2497     0469  2C5E               	goto	l87
  2498     046A                     u300:
  2499     046A                     l90:
  2500     046A  0008               	return
  2501     046B                     __end_of_I2C_Wait:
  2502     007E                     btemp	set	126	;btemp
  2503     007E                     wtemp0	set	126
  2504                           
  2505                           	psect	config
  2506                           
  2507                           ;Config register CONFIG @ 0x2007
  2508                           ;	Oscillator Selection bits
  2509                           ;	FOSC = XT, XT oscillator
  2510                           ;	Watchdog Timer Enable bit
  2511                           ;	WDTE = OFF, WDT disabled
  2512                           ;	Power-up Timer Enable bit
  2513                           ;	PWRTE = ON, PWRT enabled
  2514                           ;	Brown-out Reset Enable bit
  2515                           ;	BOREN = ON, BOR enabled
  2516                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2517                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2518                           ;	Data EEPROM Memory Code Protection bit
  2519                           ;	CPD = OFF, Data EEPROM code protection off
  2520                           ;	Flash Program Memory Write Enable bits
  2521                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2522                           ;	In-Circuit Debugger Mode bit
  2523                           ;	DEBUG = 0x1, unprogrammed default
  2524                           ;	Flash Program Memory Code Protection bit
  2525                           ;	CP = OFF, Code protection off
  2526     2007                     	org	8199
  2527     2007  3F71               	dw	16241

Data Sizes:
    Strings     12
    Constant    0
    Data        1
    BSS         2
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     42      45
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@Str	PTR unsigned char  size(2) Largest target is 30
		 -> main@str(BANK0[30]), STR_1(CODE[12]), 

    tostring@str	PTR unsigned char  size(1) Largest target is 30
		 -> main@str(BANK0[30]), 


Critical Paths under _main in COMMON

    _main->_LCD_Write_String
    _tostring->___awdiv
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Write
    _EEPROM_write->_I2C_Write

Critical Paths under _main in BANK0

    _main->_tostring

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0    2759
                                              9 BANK0     33    33      0
                       _EEPROM_write
                    _I2C_Master_Init
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                           _tostring
 ---------------------------------------------------------------------------------
 (1) _tostring                                            13    11      2    1455
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     7     5      2     375
                                              6 COMMON     7     5      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       4     3      1     395
                                              6 COMMON     4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0     199
                                              6 COMMON     3     3      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_4Bit                                       2     2      0      89
                                              2 COMMON     2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (4) _IO_Expander_Write                                    1     1      0      44
                                              1 COMMON     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_Read                                             1     1      0      23
                                              0 COMMON     1     1      0
                           _I2C_NACK
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_NACK                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_write                                         3     1      2     240
                                              1 COMMON     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_write
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _I2C_Wait
   _I2C_Master_Init
   _I2C_Read
     _I2C_NACK
       _I2C_Wait
     _I2C_Wait
   _I2C_Start
   _I2C_Stop
   _I2C_Write
   _LCD_Init
     _IO_Expander_Write
       _I2C_Start
       _I2C_Stop
       _I2C_Write
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Write_4Bit
   _tostring
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      2D       5       56.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B      12        0.0%
ABS                  0      0      3B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun May 26 15:43:36 2024

                        pc 0002                         l73 06E4                         l90 046A  
                       l84 0477                         l93 044A                         l87 045E  
                       l96 0453                         _RS 007D               ___awdiv@sign 0075  
                       fsr 0004                        l111 049F                        l120 04B8  
                      l105 045D                        l114 07F3                        l123 04D2  
                      l108 0487                        l132 05A6                        l117 050A  
                      l141 0564                        l126 04ED                        l401 0666  
                      l414 05FF                        l159 052E                        u300 046A  
                      u301 0469                        u410 0658                        u330 0605  
                      u315 04C5                        u411 0657                        u331 0604  
                      u420 065D                        u340 0610                        u500 05F1  
                      u325 04E0                        u421 065C                        u405 064C  
                      u341 060F                        u501 05F0                        u350 0621  
                      u510 05F6                        u430 05AC                        u351 0620  
                      u511 05F5                        u431 05AB                        u440 05B7  
                      u520 0690                        _PEN 048A                        u441 05B6  
                      u521 068F                        u290 0464                        u370 0633  
                      u450 05C2                        u530 06DB                        u291 0463  
                      u371 0632                        u451 05C1                        u531 06DA  
                      u540 0572                        u365 0625                        u550 0594  
                      u390 0644                        u470 05D4                        u607 0789  
                      u391 0643                        u471 05D3                        u535 06D7  
                      u560 05A6                        u480 05DE                        u617 0797  
                      u561 05A5                        u385 0634                        u481 05DD  
                      u465 05C6                        u627 07A5                        u395 0640  
                      _SEN 0488                        u637 07B3                        u485 05DA  
                      u647 07C1                        u495 05E5                        u657 07D0  
                      u577 0727                        u667 07DF                        u587 0761  
                      u677 07EE                        u597 077B                        u687 04B5  
                      fsr0 0004                        indf 0000               ___awmod@sign 0075  
          __end_of_LCD_CMD 04D3        LCD_Write_String@Str 0076             _LCD_Set_Cursor 052F  
                     l1100 0610                       l1110 0624                       l1102 0615  
                     l1200 0475                       l1120 064A                       l1112 062B  
                     l1104 0619                       l1050 0447                       l1202 0476  
                     l1210 077F                       l1130 0662                       l1122 064B  
                     l1114 062F                       l1106 061B                       l1044 045E  
                     l1052 0479                       l1220 07A1                       l1212 0785  
                     l1204 076D                       l1124 0652                       l1116 0633  
                     l1108 0621                       l1140 05B1                       l1300 071C  
                     l1046 0464                       l1062 044B                       l1054 047E  
                     l1070 04A5                       l1230 07C6                       l1222 07A9  
                     l1214 078D                       l1206 0771                       l1118 0644  
                     l1126 0658                       l1150 05C5                       l1142 05B3  
                     l1134 05A7                       l1310 0750                       l1302 071F  
                     l1048 0442                       l1064 0450                       l1056 0482  
                     l1072 04AC                       l1080 04BA                       l1240 07EA  
                     l1232 07CC                       l1224 07AF                       l1216 0793  
                     l1208 0777                       l1128 065D                       l1160 05E4  
                     l1152 05CC                       l1144 05B7                       l1136 05A8  
                     l1312 0759                       l1304 072D                       l1058 0487  
                     l1074 0454                       l1066 04EF                       l1082 04BB  
                     l1234 07D5                       l1226 07B7                       l1218 079B  
                     l1250 0549                       l1242 0530                       l1090 0600  
                     l1162 05EB                       l1154 05D0                       l1146 05BC  
                     l1138 05AC                       l1306 073C                       l1076 0459  
                     l1068 04A1                       l1084 04C2                       l1236 07DB  
                     l1228 07BD                       l1244 0531                       l1252 0551  
                     l1260 0568                       l1092 0601                       l1156 05D4  
                     l1148 05C2                       l1164 05F1                       l1180 068A  
                     l1172 066A                       l1308 0748                       l1078 045C  
                     l1270 0495                       l1238 07E4                       l1246 0539  
                     l1086 04D4                       l1262 0584                       l1094 0605  
                     l1166 05F6                       l1158 05DE                       l1190 06CD  
                     l1182 0690                       l1174 066C                       l1272 0499  
                     l1248 0541                       l1088 04D6                       l1264 058A  
                     l1096 060A                       l1168 05FB                       l1192 06DB  
                     l1184 0693                       l1176 0671                       l1194 046B  
                     l1266 0488                       l1258 0565                       l1098 060C  
                     l1186 06B7                       l1178 0677                       l1290 06FB  
                     l1282 06E5                       l1276 050C                       l1196 046F  
                     l1268 048D                       l1188 06C7                       l1292 0704  
                     l1284 06E8                       l1198 0472                       l1382 0559  
                     l1294 0709                       l1286 06ED                       l1296 070F  
                     l1288 06F3                       l1298 0717                       STR_1 0013  
                     _RSEN 0489           __end_of_I2C_NACK 045E          ?_LCD_Write_String 0076  
                     _main 06E5           __end_of_I2C_Read 04A0                       btemp 007E  
         __end_of_I2C_Wait 046B           __end_of_I2C_Stop 0454                       start 0000  
       ??_LCD_Write_String 0078       LCD_Write_4Bit@Nibble 0073    EEPROM_write@Address_LOW 0071  
         __end_of_LCD_Init 07F4           ?_I2C_Master_Init 0070       __end_of_EEPROM_write 052F  
                    ?_main 0070                      _ACKEN 048C                      _ACKDT 048D  
          __end_of___awdiv 0667            __end_of___awmod 0600            ___awdiv@divisor 0070  
          ___awdiv@counter 0074                      _TRISD 0088     __end_of_LCD_Set_Cursor 0565  
        __end_of_I2C_Start 044B          __end_of_I2C_Write 0488                      pclath 000A  
                    status 0003                      wtemp0 007E             _LCD_Write_4Bit 04A0  
           _LCD_Write_Char 04D3            __initialization 07F4               __end_of_main 076C  
 EEPROM_write@Address_High 0073          _IO_Expander_Write 04EE         ?_IO_Expander_Write 0070  
                   ??_main 0029                  ??_LCD_CMD 0074        ??_IO_Expander_Write 0071  
          ?_LCD_Set_Cursor 0076           ___awdiv@dividend 0072                     _SSPADD 0093  
                   _TRISC3 043B                     _TRISC4 043C                     _SSPCON 0014  
                   _SSPBUF 0013     __end_of_LCD_Write_4Bit 04B9     __end_of_LCD_Write_Char 04EE  
__end_of_IO_Expander_Write 050B                 _Temp_value 004B                  ??___awdiv 0074  
                ??___awmod 0074           ___awdiv@quotient 0076            ___awmod@divisor 0070  
          ___awmod@counter 0074                  ?_I2C_NACK 0070                  ?_I2C_Read 0070  
                ?_I2C_Wait 0070                  ?_I2C_Stop 0070           __end_of_tostring 06E5  
  __end_of__initialization 07FC                  ?_LCD_Init 0070            ?_LCD_Write_4Bit 0070  
          ?_LCD_Write_Char 0070             __pcstackCOMMON 0070               __pidataBANK0 0441  
               ??_I2C_NACK 0070                 ??_I2C_Read 0070                 ??_I2C_Wait 0070  
               ??_I2C_Stop 0070                 __pbssBANK0 004B                 ??_LCD_Init 0076  
             _EEPROM_write 050B               I2C_Read@Data 0070                 __pmaintext 06E5  
                  _ACKSTAT 048E                    _LCD_CMD 04B9                    _SSPCON2 0091  
                  _SSPSTAT 0094                 __stringtab 0003                    _i2c_add 004A  
                _I2C_Start 0442                  _I2C_Write 0478           EEPROM_write@data 0072  
                  ___awdiv 0600                    ___awmod 05A7                  ?_tostring 0078  
         ??_LCD_Set_Cursor 0077                    __ptext1 0667                    __ptext2 05A7  
                  __ptext3 0600                    __ptext4 0565                    __ptext5 04D3  
                  __ptext6 052F                    __ptext7 076C                    __ptext8 04B9  
                  __ptext9 04A0           ___awmod@dividend 0072                    main@str 002C  
     end_of_initialization 07FC                 ?_I2C_Start 0070                 ?_I2C_Write 0070  
               ??_tostring 007A                  _PORTDbits 0008                 LCD_CMD@CMD 0075  
         ??_LCD_Write_4Bit 0072          LCD_Write_String@i 007B           ??_LCD_Write_Char 0074  
         _LCD_Write_String 0565        start_initialization 07F4          ??_I2C_Master_Init 0070  
              ??_I2C_Start 0070                ??_I2C_Write 0070                __pdataBANK0 004C  
                 ?_LCD_CMD 0070                __pbssCOMMON 007D                  ___latbits 0002  
            __pcstackBANK0 0020                  __pnvBANK0 004A      IO_Expander_Write@Data 0071  
                 ?___awdiv 0070                   ?___awmod 0070                  __pstrings 0003  
                 _I2C_NACK 0454                   _I2C_Read 0488                   _I2C_Wait 045E  
                 _I2C_Stop 044B                   _LCD_Init 076C                tostring@len 0027  
              tostring@rem 0020                tostring@num 0078                tostring@str 0026  
              __stringbase 0012   __end_of_LCD_Write_String 05A7              I2C_Write@Data 0070  
       __end_of__stringtab 0013            _I2C_Master_Init 046B                   __ptext10 04EE  
                 __ptext11 0488                   __ptext12 0454                   __ptext13 046B  
                 __ptext14 050B                   __ptext15 0478                   __ptext16 044B  
                 __ptext17 0442                   __ptext18 045E              ?_EEPROM_write 0071  
          _BackLight_State 004C                   _tostring 0667         LCD_Write_Char@Data 0075  
           ??_EEPROM_write 0073                  stringcode 000D                  tostring@i 0022  
                tostring@n 0024    __end_of_I2C_Master_Init 0478            LCD_Init@I2C_Add 0078  
                 stringdir 000D                   stringtab 0003          LCD_Set_Cursor@COL 0076  
        LCD_Set_Cursor@ROW 0079                _SSPCON2bits 0091  
